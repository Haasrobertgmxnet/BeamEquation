<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__beam_8h_source" xml:lang="en-US">
<title>Beam.h</title>
<indexterm><primary>C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__beam_8h_source_1l00001"/>00001 <emphasis role="preprocessor">#pragma&#32;once</emphasis>
<anchor xml:id="__beam_8h_source_1l00002"/>00002 
<anchor xml:id="__beam_8h_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;torch/torch.h&gt;</emphasis>
<anchor xml:id="__beam_8h_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__global_8h">Global.h</link>&quot;</emphasis>
<anchor xml:id="__beam_8h_source_1l00005"/>00005 
<anchor xml:id="__beam_8h_source_1l00006"/><link linkend="_namespace_beam">00006</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_beam">Beam</link>&#32;{
<anchor xml:id="__beam_8h_source_1l00007"/>00007 
<anchor xml:id="__beam_8h_source_1l00016"/><link linkend="_class_beam_1_1_p_i_n_n">00016</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;torch::nn::Module&#32;{
<anchor xml:id="__beam_8h_source_1l00017"/>00017 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
<anchor xml:id="__beam_8h_source_1l00018"/><link linkend="_class_beam_1_1_p_i_n_n_1accd6d7388166661c25fecdc30d9af0c9">00018</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_beam_1_1_p_i_n_n_1accd6d7388166661c25fecdc30d9af0c9">PINN</link>()&#32;{
<anchor xml:id="__beam_8h_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Network&#32;structure:&#32;1&#32;input&#32;→&#32;5&#32;neurons&#32;→&#32;5&#32;neurons&#32;→&#32;1&#32;output</emphasis>
<anchor xml:id="__beam_8h_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fc1&#32;=&#32;register_module(<emphasis role="stringliteral">&quot;fc1&quot;</emphasis>,&#32;torch::nn::Linear(1,&#32;5));
<anchor xml:id="__beam_8h_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fc2&#32;=&#32;register_module(<emphasis role="stringliteral">&quot;fc2&quot;</emphasis>,&#32;torch::nn::Linear(5,&#32;5));
<anchor xml:id="__beam_8h_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fc3&#32;=&#32;register_module(<emphasis role="stringliteral">&quot;fc3&quot;</emphasis>,&#32;torch::nn::Linear(5,&#32;1));
<anchor xml:id="__beam_8h_source_1l00023"/>00023 
<anchor xml:id="__beam_8h_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;weights&#32;using&#32;Xavier&#32;initialization</emphasis>
<anchor xml:id="__beam_8h_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::nn::init::xavier_uniform_(fc1-&gt;weight);
<anchor xml:id="__beam_8h_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::nn::init::xavier_uniform_(fc2-&gt;weight);
<anchor xml:id="__beam_8h_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::nn::init::xavier_uniform_(fc3-&gt;weight);
<anchor xml:id="__beam_8h_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00029"/>00029 
<anchor xml:id="__beam_8h_source_1l00035"/><link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">00035</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">forward</link>(torch::Tensor&#32;x)&#32;{
<anchor xml:id="__beam_8h_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;torch::tanh(fc1-&gt;forward(x));
<anchor xml:id="__beam_8h_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;torch::tanh(fc2-&gt;forward(x));
<anchor xml:id="__beam_8h_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;fc3-&gt;forward(x);
<anchor xml:id="__beam_8h_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="__beam_8h_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00041"/>00041 
<anchor xml:id="__beam_8h_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
<anchor xml:id="__beam_8h_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::nn::Linear&#32;fc1{&#32;<emphasis role="keyword">nullptr</emphasis>&#32;},&#32;fc2{&#32;<emphasis role="keyword">nullptr</emphasis>&#32;},&#32;fc3{&#32;<emphasis role="keyword">nullptr</emphasis>&#32;};
<anchor xml:id="__beam_8h_source_1l00044"/>00044 &#32;&#32;&#32;&#32;};
<anchor xml:id="__beam_8h_source_1l00045"/>00045 
<anchor xml:id="__beam_8h_source_1l00049"/><link linkend="_struct_beam_1_1_losses">00049</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_beam_1_1_losses">Losses</link>&#32;{
<anchor xml:id="__beam_8h_source_1l00050"/><link linkend="_struct_beam_1_1_losses_1a031fd264cee66da4f3a4e1cafdb2ee3a">00050</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_struct_beam_1_1_losses_1a031fd264cee66da4f3a4e1cafdb2ee3a">total</link>;
<anchor xml:id="__beam_8h_source_1l00051"/><link linkend="_struct_beam_1_1_losses_1a628553f1a885cb9c709c01489bab559d">00051</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_struct_beam_1_1_losses_1a628553f1a885cb9c709c01489bab559d">physics</link>;
<anchor xml:id="__beam_8h_source_1l00052"/><link linkend="_struct_beam_1_1_losses_1a8ea3376de1d595babf972d1b20a9b3dd">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_struct_beam_1_1_losses_1a8ea3376de1d595babf972d1b20a9b3dd">boundary</link>;
<anchor xml:id="__beam_8h_source_1l00053"/><link linkend="_struct_beam_1_1_losses_1ac8bca10d64a303e3f0ff3e84c38abe1e">00053</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_struct_beam_1_1_losses_1ac8bca10d64a303e3f0ff3e84c38abe1e">l2_reg</link>;
<anchor xml:id="__beam_8h_source_1l00054"/>00054 &#32;&#32;&#32;&#32;};
<anchor xml:id="__beam_8h_source_1l00055"/>00055 
<anchor xml:id="__beam_8h_source_1l00056"/>00056 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number&#32;of&#32;epochs&#32;for&#32;training&#32;with&#32;Adam&#32;optimizer</emphasis>
<anchor xml:id="__beam_8h_source_1l00057"/><link linkend="_namespace_beam_1a3183ec89cd2a0d1b1b7b57a9d46ba840">00057</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_beam_1a3183ec89cd2a0d1b1b7b57a9d46ba840">adam_epochs</link>&#32;=&#32;uint16_t{&#32;500&#32;};
<anchor xml:id="__beam_8h_source_1l00058"/><link linkend="_namespace_beam_1af1739f3ac632def72662b770deae5e16">00058</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&#32;<link linkend="_namespace_beam_1af1739f3ac632def72662b770deae5e16">adam_epochs_diff</link>&#32;=&#32;uint16_t{&#32;100&#32;};
<anchor xml:id="__beam_8h_source_1l00059"/>00059 
<anchor xml:id="__beam_8h_source_1l00065"/><link linkend="_namespace_beam_1a98af83695d468d303f6d72dc4d43a976">00065</link> &#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_namespace_beam_1a98af83695d468d303f6d72dc4d43a976">generate_training_data</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;n_points&#32;=&#32;100)&#32;{
<anchor xml:id="__beam_8h_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;options&#32;=&#32;torch::TensorOptions().dtype(torch::kFloat32).requires_grad(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__beam_8h_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x&#32;=&#32;torch::rand({&#32;n_points,&#32;1&#32;},&#32;options);&#32;&#32;<emphasis role="comment">//&#32;Random&#32;points&#32;in&#32;[0,&#32;1]</emphasis>
<anchor xml:id="__beam_8h_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;x;
<anchor xml:id="__beam_8h_source_1l00069"/>00069 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00070"/>00070 
<anchor xml:id="__beam_8h_source_1l00083"/><link linkend="_namespace_beam_1a078e93911aeab9c7299cf4d72f096b2b">00083</link> &#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_namespace_beam_1a078e93911aeab9c7299cf4d72f096b2b">boundary_loss</link>(<link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&amp;&#32;model)&#32;{
<anchor xml:id="__beam_8h_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;options&#32;=&#32;torch::TensorOptions().dtype(torch::kFloat32).requires_grad(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__beam_8h_source_1l00085"/>00085 
<anchor xml:id="__beam_8h_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;=&#32;0&#32;point</emphasis>
<anchor xml:id="__beam_8h_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x0&#32;=&#32;torch::zeros({&#32;1,&#32;1&#32;},&#32;options).set_requires_grad(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__beam_8h_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;u0&#32;=&#32;model.<link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">forward</link>(x0);
<anchor xml:id="__beam_8h_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;du0&#32;=&#32;torch::autograd::grad({&#32;u0&#32;},&#32;{&#32;x0&#32;},&#32;{&#32;torch::ones_like(u0)&#32;},
<anchor xml:id="__beam_8h_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00091"/>00091 
<anchor xml:id="__beam_8h_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;=&#32;1&#32;point</emphasis>
<anchor xml:id="__beam_8h_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x1&#32;=&#32;torch::ones({&#32;1,&#32;1&#32;},&#32;options).set_requires_grad(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__beam_8h_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;u1&#32;=&#32;model.<link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">forward</link>(x1);
<anchor xml:id="__beam_8h_source_1l00095"/>00095 
<anchor xml:id="__beam_8h_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;du1&#32;=&#32;torch::autograd::grad({&#32;u1&#32;},&#32;{&#32;x1&#32;},&#32;{&#32;torch::ones_like(u1)&#32;},
<anchor xml:id="__beam_8h_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d2u1&#32;=&#32;torch::autograd::grad({&#32;du1&#32;},&#32;{&#32;x1&#32;},&#32;{&#32;torch::ones_like(du1)&#32;},
<anchor xml:id="__beam_8h_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d3u1&#32;=&#32;torch::autograd::grad({&#32;d2u1&#32;},&#32;{&#32;x1&#32;},&#32;{&#32;torch::ones_like(d2u1)&#32;},
<anchor xml:id="__beam_8h_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00102"/>00102 
<anchor xml:id="__beam_8h_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Sum&#32;of&#32;MSE&#32;losses&#32;for&#32;each&#32;boundary&#32;condition</emphasis>
<anchor xml:id="__beam_8h_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;loss&#32;=&#32;torch::mse_loss(u0,&#32;torch::zeros_like(u0))&#32;+
<anchor xml:id="__beam_8h_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::mse_loss(du0,&#32;torch::zeros_like(du0))&#32;+
<anchor xml:id="__beam_8h_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::mse_loss(d2u1,&#32;torch::zeros_like(d2u1))&#32;+
<anchor xml:id="__beam_8h_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::mse_loss(d3u1,&#32;torch::zeros_like(d3u1));
<anchor xml:id="__beam_8h_source_1l00108"/>00108 
<anchor xml:id="__beam_8h_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;loss;
<anchor xml:id="__beam_8h_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00111"/>00111 
<anchor xml:id="__beam_8h_source_1l00124"/><link linkend="_namespace_beam_1a5bb3979d535ad323771667f5dfe41374">00124</link> &#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_namespace_beam_1a5bb3979d535ad323771667f5dfe41374">physics_loss</link>(<link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&amp;&#32;model,&#32;torch::Tensor&#32;input,&#32;<emphasis role="keywordtype">float</emphasis>&#32;EI&#32;=&#32;1.0f)&#32;{
<anchor xml:id="__beam_8h_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__beam_8h_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x&#32;=&#32;input.clone().requires_grad_(<emphasis role="keyword">true</emphasis>);
<anchor xml:id="__beam_8h_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;u&#32;=&#32;model.<link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">forward</link>(x);
<anchor xml:id="__beam_8h_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;ones&#32;=&#32;torch::ones_like(u);
<anchor xml:id="__beam_8h_source_1l00129"/>00129 
<anchor xml:id="__beam_8h_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;du_dx&#32;=&#32;torch::autograd::grad({&#32;u&#32;},&#32;{&#32;x&#32;},&#32;{&#32;ones&#32;},&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d2u_dx2&#32;=&#32;torch::autograd::grad({&#32;du_dx&#32;},&#32;{&#32;x&#32;},&#32;{&#32;ones&#32;},&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d3u_dx3&#32;=&#32;torch::autograd::grad({&#32;d2u_dx2&#32;},&#32;{&#32;x&#32;},&#32;{&#32;ones&#32;},&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;d4u_dx4&#32;=&#32;torch::autograd::grad({&#32;d3u_dx3&#32;},&#32;{&#32;x&#32;},&#32;{&#32;ones&#32;},&#32;<link linkend="_namespace_global_1a51e08ff8dc510ca548116d8033887955">Global::keep_graph</link>,&#32;<emphasis role="keyword">true</emphasis>)[0];
<anchor xml:id="__beam_8h_source_1l00134"/>00134 
<anchor xml:id="__beam_8h_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;q&#32;=&#32;torch::ones_like(x);&#32;&#32;<emphasis role="comment">//&#32;Constant&#32;load&#32;q(x)&#32;=&#32;1</emphasis>
<anchor xml:id="__beam_8h_source_1l00136"/>00136 
<anchor xml:id="__beam_8h_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;residual&#32;=&#32;EI&#32;*&#32;d4u_dx4&#32;-&#32;q;
<anchor xml:id="__beam_8h_source_1l00138"/>00138 
<anchor xml:id="__beam_8h_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;torch::mean(residual.pow(2));
<anchor xml:id="__beam_8h_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;&#32;e)&#32;{
<anchor xml:id="__beam_8h_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;in&#32;physics_loss:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__beam_8h_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;torch::tensor(0.0f,&#32;torch::requires_grad(<emphasis role="keyword">true</emphasis>));
<anchor xml:id="__beam_8h_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00145"/>00145 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00146"/>00146 
<anchor xml:id="__beam_8h_source_1l00154"/><link linkend="_namespace_beam_1a1f20915669eb5e5ca0851aeac92dab48">00154</link> &#32;&#32;&#32;&#32;torch::Tensor&#32;<link linkend="_namespace_beam_1a1f20915669eb5e5ca0851aeac92dab48">compute_l2_regularization</link>(<link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&amp;&#32;model,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;lambda_reg)&#32;{
<anchor xml:id="__beam_8h_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lambda_reg&#32;&lt;=&#32;0.0f)&#32;{
<anchor xml:id="__beam_8h_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;torch::zeros({&#32;1&#32;},&#32;torch::TensorOptions().dtype(torch::kFloat32));
<anchor xml:id="__beam_8h_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00158"/>00158 
<anchor xml:id="__beam_8h_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;l2&#32;=&#32;torch::zeros({&#32;1&#32;},&#32;torch::TensorOptions().dtype(torch::kFloat32));
<anchor xml:id="__beam_8h_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;param&#32;:&#32;model.parameters())&#32;{
<anchor xml:id="__beam_8h_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;l2&#32;+=&#32;torch::norm(param,&#32;2).pow(2);
<anchor xml:id="__beam_8h_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00163"/>00163 
<anchor xml:id="__beam_8h_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lambda_reg&#32;*&#32;l2;
<anchor xml:id="__beam_8h_source_1l00165"/>00165 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00166"/>00166 
<anchor xml:id="__beam_8h_source_1l00176"/><link linkend="_namespace_beam_1a22ac23dadc3912b5a3bcc400383e475b">00176</link> &#32;&#32;&#32;&#32;<link linkend="_struct_beam_1_1_losses">Losses</link>&#32;<link linkend="_namespace_beam_1a22ac23dadc3912b5a3bcc400383e475b">compute_losses</link>(<link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&amp;&#32;model,&#32;<emphasis role="keyword">const</emphasis>&#32;torch::Tensor&amp;&#32;physics_input)&#32;{
<anchor xml:id="__beam_8h_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__beam_8h_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;loss_physics&#32;=&#32;<link linkend="_namespace_beam_1a5bb3979d535ad323771667f5dfe41374">physics_loss</link>(model,&#32;physics_input);
<anchor xml:id="__beam_8h_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;loss_boundary&#32;=&#32;<link linkend="_namespace_beam_1a078e93911aeab9c7299cf4d72f096b2b">boundary_loss</link>(model);
<anchor xml:id="__beam_8h_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;l2_reg&#32;=&#32;<link linkend="_namespace_beam_1a1f20915669eb5e5ca0851aeac92dab48">compute_l2_regularization</link>(model,&#32;0.0f);
<anchor xml:id="__beam_8h_source_1l00181"/>00181 
<anchor xml:id="__beam_8h_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;total&#32;=&#32;loss_physics&#32;+&#32;2.0f&#32;*&#32;loss_boundary&#32;+&#32;l2_reg;
<anchor xml:id="__beam_8h_source_1l00183"/>00183 
<anchor xml:id="__beam_8h_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;total,&#32;loss_physics,&#32;loss_boundary,&#32;l2_reg&#32;};
<anchor xml:id="__beam_8h_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::exception&amp;&#32;e)&#32;{
<anchor xml:id="__beam_8h_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;in&#32;compute_losses:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="__beam_8h_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;dummy&#32;=&#32;torch::tensor(1.0f,&#32;torch::requires_grad(<emphasis role="keyword">true</emphasis>));
<anchor xml:id="__beam_8h_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{&#32;dummy,&#32;dummy,&#32;dummy,&#32;dummy&#32;};
<anchor xml:id="__beam_8h_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00191"/>00191 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00192"/>00192 
<anchor xml:id="__beam_8h_source_1l00201"/><link linkend="_namespace_beam_1a3671c85c927bf4f6291b78ed2edcdd99">00201</link> &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_namespace_beam_1a3671c85c927bf4f6291b78ed2edcdd99">visualize_solution</link>(<link linkend="_class_beam_1_1_p_i_n_n">PINN</link>&amp;&#32;model,&#32;<emphasis role="keywordtype">int</emphasis>&#32;grid_size&#32;=&#32;20)&#32;{
<anchor xml:id="__beam_8h_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model.eval();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;model&#32;to&#32;inference&#32;mode</emphasis>
<anchor xml:id="__beam_8h_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::NoGradGuard&#32;no_grad;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Disable&#32;gradient&#32;calculation</emphasis>
<anchor xml:id="__beam_8h_source_1l00204"/>00204 
<anchor xml:id="__beam_8h_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;device&#32;used&#32;by&#32;model&#32;parameters&#32;(CPU&#32;or&#32;CUDA)</emphasis>
<anchor xml:id="__beam_8h_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Device&#32;device&#32;=&#32;torch::kCPU;
<anchor xml:id="__beam_8h_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">auto</emphasis>&amp;&#32;p&#32;:&#32;model.parameters())&#32;{
<anchor xml:id="__beam_8h_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;device&#32;=&#32;p.device();&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__beam_8h_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00210"/>00210 
<anchor xml:id="__beam_8h_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;options&#32;=&#32;torch::TensorOptions().dtype(torch::kFloat32).device(device);
<anchor xml:id="__beam_8h_source_1l00212"/>00212 
<anchor xml:id="__beam_8h_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\nSolution&#32;of&#32;the&#32;Euler-Bernoulli&#32;beam&#32;equation&#32;on&#32;[0,&#32;1]:\n&quot;</emphasis>;
<anchor xml:id="__beam_8h_source_1l00214"/>00214 
<anchor xml:id="__beam_8h_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;grid_size;&#32;++i)&#32;{
<anchor xml:id="__beam_8h_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;x_val&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(i)&#32;/&#32;(grid_size&#32;-&#32;1);&#32;&#32;<emphasis role="comment">//&#32;Linearly&#32;spaced&#32;point&#32;in&#32;[0,&#32;1]</emphasis>
<anchor xml:id="__beam_8h_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;x_tensor&#32;=&#32;torch::tensor({&#32;{x_val}&#32;},&#32;options);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Shape&#32;[1,&#32;1]</emphasis>
<anchor xml:id="__beam_8h_source_1l00218"/>00218 
<anchor xml:id="__beam_8h_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;torch::Tensor&#32;u_pred;
<anchor xml:id="__beam_8h_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
<anchor xml:id="__beam_8h_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;u_pred&#32;=&#32;model.<link linkend="_class_beam_1_1_p_i_n_n_1a9a8726f885ed0c641a2511c0d90e10f1">forward</link>(x_tensor);&#32;&#32;<emphasis role="comment">//&#32;Predict&#32;u(x)</emphasis>
<anchor xml:id="__beam_8h_source_1l00222"/>00222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;c10::Error&amp;&#32;e)&#32;{
<anchor xml:id="__beam_8h_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error&#32;during&#32;forward&#32;pass&#32;at&#32;x&#32;=&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;x_val&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;:&#32;&quot;</emphasis>&#32;&lt;&lt;&#32;e.what()&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__beam_8h_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="__beam_8h_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00227"/>00227 
<anchor xml:id="__beam_8h_source_1l00228"/>00228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;tensor&#32;to&#32;float&#32;and&#32;print&#32;result</emphasis>
<anchor xml:id="__beam_8h_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;u_val&#32;=&#32;u_pred.detach().to(torch::kCPU).item&lt;<emphasis role="keywordtype">float</emphasis>&gt;();
<anchor xml:id="__beam_8h_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::fixed&#32;&lt;&lt;&#32;std::setprecision(2)&#32;&lt;&lt;&#32;x_val&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\t&quot;</emphasis>&#32;&lt;&lt;&#32;std::setprecision(5)&#32;&lt;&lt;&#32;u_val&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;\n&quot;</emphasis>;
<anchor xml:id="__beam_8h_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00232"/>00232 &#32;&#32;&#32;&#32;}
<anchor xml:id="__beam_8h_source_1l00233"/>00233 }
<anchor xml:id="__beam_8h_source_1l00234"/>00234 
<anchor xml:id="__beam_8h_source_1l00235"/>00235 <emphasis role="comment">/*</emphasis>
<anchor xml:id="__beam_8h_source_1l00236"/>00236 <emphasis role="comment">Vorschläge&#32;und&#32;Anmerkungen&#32;(keine&#32;Code-Änderung!):</emphasis>
<anchor xml:id="__beam_8h_source_1l00237"/>00237 <emphasis role="comment">Hardcoded&#32;loss&#32;weights&#32;(+2.0f&#32;*&#32;boundary&#32;etc.)&#32;könnten&#32;als&#32;Konstante&#32;oder&#32;Parameter&#32;geführt&#32;werden.</emphasis>
<anchor xml:id="__beam_8h_source_1l00238"/>00238 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00239"/>00239 <emphasis role="comment">Die&#32;Verwendung&#32;von&#32;Global::keep_graph&#32;ist&#32;etwas&#32;&quot;magisch&quot;&#32;–&#32;eventuell&#32;explizit&#32;dokumentieren&#32;oder&#32;kapseln.</emphasis>
<anchor xml:id="__beam_8h_source_1l00240"/>00240 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00241"/>00241 <emphasis role="comment">In&#32;physics_loss:&#32;Bei&#32;Problemen&#32;mit&#32;Gradientenstabilität&#32;wäre&#32;ein&#32;optionaler&#32;Check&#32;der&#32;.grad_fn()&#32;hilfreich.</emphasis>
<anchor xml:id="__beam_8h_source_1l00242"/>00242 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00243"/>00243 <emphasis role="comment">std::pair&lt;torch::Tensor,&#32;torch::Tensor&gt;&#32;in&#32;generate_training_data()&#32;enthält&#32;ein&#32;Dummy-Ziel.&#32;Vielleicht&#32;besser&#32;std::tuple&lt;torch::Tensor&gt;&#32;oder&#32;ein&#32;spezieller&#32;Struct.</emphasis>
<anchor xml:id="__beam_8h_source_1l00244"/>00244 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00245"/>00245 <emphasis role="comment">Fehlerbehandlung&#32;(try-catch)&#32;ist&#32;gut&#32;—&#32;aber&#32;torch::tensor(0.0f,&#32;...)&#32;ohne&#32;Device-Spezifikation&#32;kann&#32;zu&#32;Problemen&#32;führen&#32;(nur&#32;wenn&#32;du&#32;CUDA&#32;verwendest).</emphasis>
<anchor xml:id="__beam_8h_source_1l00246"/>00246 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00247"/>00247 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00248"/>00248 <emphasis role="comment"></emphasis>
<anchor xml:id="__beam_8h_source_1l00249"/>00249 <emphasis role="comment">*/</emphasis>
</programlisting></section>
