{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Beam.Cpp }Beam.Cpp}
{\comment Generated by doxygen 1.10.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Beam.Cpp}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version \par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
BeamEquation: Physics-Informed Neural Network (PINN) for Euler-Bernoulli Beam\par \pard\plain 
{\tc\tcl1 \v BeamEquation: Physics-Informed Neural Network (PINN) for Euler-Bernoulli Beam}
{\xe \v BeamEquation: Physics-Informed Neural Network (PINN) for Euler-Bernoulli Beam}
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
 This repository implements a Physics-Informed Neural Network (PINN) to solve the Euler-Bernoulli beam equation. It combines machine learning (LibTorch/C++) with physical constraints to estimate the deflection of a beam on the domain ([0, 1]).\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Contents
\par}
{\tc\tcl2 \v Contents}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 {\b main.cpp}} : Training and inference routine\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 {\b Beam.h}/cpp} : PINN model definition and loss logic\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 {\b Global.h}} : {\b Global} constants and options\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 {\b Timer.h}} : Runtime measurement helper\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 plot.py} : Python script to visualize model output\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 test_beam.cpp} : Unit tests with Catch2\par}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Getting Started
\par}
{\tc\tcl2 \v Getting Started}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Requirements
\par}
{\tc\tcl3 \v Requirements}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Visual Studio 2022\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CMake 3.20+\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
vcpkg for dependencies (see below)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LibTorch (installed via vcpkg)\par}
\par
\par}
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Setup
\par}
{\tc\tcl3 \v Setup}
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Clone Repository} \par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid git clone https://github.com/yourusername/BeamEquation.git\par
}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Install Dependencies} \par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid # Optional: set VCPKG_ROOT if not global\par
git clone https://github.com/microsoft/vcpkg.git\par
./vcpkg/bootstrap-vcpkg.sh\par
./vcpkg/vcpkg install libtorch catch2\par
}
\par
{
\par
\pard\plain \s140\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\b Build Project} \par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir build && cd build\par
cmake .. -DCMAKE_TOOLCHAIN_FILE=C:/Users/haasr/vcpkg/scripts/buildsystems/vcpkg.cmake\par
cmake --build . --config Release\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
\par}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Training
\par}
{\tc\tcl2 \v Training}
Run the executable (in Release mode):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./BeamEquation.exe > result.txt\par
}
\par
The model will:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Train using Adam (coarse fit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Refine with LBFGS\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Output deflection {\f2 u(x)}  over [0, 1]\par}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Plotting Results
\par}
{\tc\tcl2 \v Plotting Results}
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Requirements
\par}
{\tc\tcl3 \v Requirements}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Python 3.8+\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 matplotlib} \par}
\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid pip install matplotlib\par
}
\par}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Usage
\par}
{\tc\tcl3 \v Usage}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python plot.py result.txt\par
}
\par
This script plots the predicted beam deflection over ([0,1]).\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
\par}
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Testing
\par}
{\tc\tcl2 \v Testing}
We use {\f2 Catch2} for unit testing.\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Build Tests
\par}
{\tc\tcl3 \v Build Tests}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake .. -DBUILD_TESTING=ON\par
cmake --build . --config Debug\par
ctest\par
}
\par
Or run directly:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./test_beam\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
\par}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
License
\par}
{\tc\tcl2 \v License}
MIT License\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Acknowledgments
\par}
{\tc\tcl2 \v Acknowledgments}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LibTorch (PyTorch C++ API)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Microsoft vcpkg\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Catch2 Testing Framework \par}
\par
\par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Beam} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Global} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Helper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Beam::Losses\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
torch::nn::Module
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Beam::PINN\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Helper::Timer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Beam::Losses} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct to hold different loss components })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Beam::PINN} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A Physics-Informed Neural Network ({\b PINN}) model for 1D Euler-Bernoulli beam deflection })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Helper::Timer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/{\b CMakeCCompilerId.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/{\b CMakeCXXCompilerId.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Beam.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Global.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Timer.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Beam Namespace Reference\par \pard\plain 
{\tc\tcl2 \v Beam}
{\xe \v Beam}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Losses}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct to hold different loss components. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b PINN}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A Physics-Informed Neural Network ({\b PINN}) model for 1D Euler-Bernoulli beam deflection. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b generate_training_data} (const int n_points=100)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates random 1D training points in the interval [0, 1]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b boundary_loss} ({\b PINN} &model)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the boundary condition loss for the beam. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b physics_loss} ({\b PINN} &model, torch::Tensor input, float EI=1.0f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the physics loss (residual of the Euler-Bernoulli beam equation). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b compute_l2_regularization} ({\b PINN} &model, const float lambda_reg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes L2 (Tikhonov) regularization loss on all model parameters. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Losses} {\b compute_losses} ({\b PINN} &model, const torch::Tensor &physics_input)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the total loss and its components (physics, boundary, L2). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b visualize_solution} ({\b PINN} &model, int grid_size=20)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualizes the solution u(x) in R of the trained {\b PINN} model on [0, 1]. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b adam_epochs} = uint16_t\{ 500 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b adam_epochs_diff} = uint16_t\{ 100 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v boundary_loss\:Beam}
{\xe \v Beam\:boundary_loss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::boundary_loss ({\b PINN} &  {\i model})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the boundary condition loss for the beam. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Enforces:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
u(0) = 0\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
u'(0) = 0\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
u''(1) = 0\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
u'''(1) = 0\par}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{The {\b PINN} model \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Mean squared error of all boundary residuals \par
}}}{
Definition at line {\b 83} of file {\b Beam.h}.}\par
}
{\xe \v compute_l2_regularization\:Beam}
{\xe \v Beam\:compute_l2_regularization}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::compute_l2_regularization ({\b PINN} &  {\i model}, const float  {\i lambda_reg})}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes L2 (Tikhonov) regularization loss on all model parameters. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{The {\b PINN} model \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lambda_reg} \cell }{Regularization strength (0 = no regularization) \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Scalar L2 regularization loss \par
}}}{
Definition at line {\b 154} of file {\b Beam.h}.}\par
}
{\xe \v compute_losses\:Beam}
{\xe \v Beam\:compute_losses}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Losses} Beam::compute_losses ({\b PINN} &  {\i model}, const torch::Tensor &  {\i physics_input})}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the total loss and its components (physics, boundary, L2). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Total loss = physics + 2 \'D7 boundary + 1 \'D7 L2 (hardcoded weights)\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{The {\b PINN} model \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i physics_input} \cell }{Input points for physics loss \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Struct containing all loss terms \par
}}}{
Definition at line {\b 176} of file {\b Beam.h}.}\par
}
{\xe \v generate_training_data\:Beam}
{\xe \v Beam\:generate_training_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::generate_training_data (const int  {\i n_points} = {\f2 100})}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates random 1D training points in the interval [0, 1]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i n_points} \cell }{Number of training samples \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Tensor: input x in R^n \par
}}}{
Definition at line {\b 65} of file {\b Beam.h}.}\par
}
{\xe \v physics_loss\:Beam}
{\xe \v Beam\:physics_loss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::physics_loss ({\b PINN} &  {\i model}, torch::Tensor  {\i input}, float  {\i EI} = {\f2 1.0f})}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the physics loss (residual of the Euler-Bernoulli beam equation). }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The differential equation: EI * d\'E2\'81\'B4u/dx\'E2\'81\'B4 = q(x) where q(x) = 1 is used here.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{The {\b PINN} model \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input} \cell }{Sample input points (x \'E2\'88\'88 \'E2\'84\'9D^\{N\'C3\'971\}) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i EI} \cell }{Bending stiffness coefficient (default = 1.0) \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
MSE of the PDE residuals \par
}}}{
Definition at line {\b 124} of file {\b Beam.h}.}\par
}
{\xe \v visualize_solution\:Beam}
{\xe \v Beam\:visualize_solution}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Beam::visualize_solution ({\b PINN} &  {\i model}, int  {\i grid_size} = {\f2 20})}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualizes the solution u(x) in R of the trained {\b PINN} model on [0, 1]. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Prints x and u(x) values on a grid to the console in tabular form.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{The trained {\b PINN} model (inference mode is set internally) \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i grid_size} \cell }{Number of equally spaced evaluation points in [0, 1] \cell }
{\row }
}
}{
Definition at line {\b 201} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v adam_epochs\:Beam}
{\xe \v Beam\:adam_epochs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr auto Beam::adam_epochs = uint16_t\{ 500 \}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 57} of file {\b Beam.h}.}\par
}
{\xe \v adam_epochs_diff\:Beam}
{\xe \v Beam\:adam_epochs_diff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr auto Beam::adam_epochs_diff = uint16_t\{ 100 \}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 58} of file {\b Beam.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Global Namespace Reference\par \pard\plain 
{\tc\tcl2 \v Global}
{\xe \v Global}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b keep_graph} = bool\{ true \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v keep_graph\:Global}
{\xe \v Global\:keep_graph}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr auto Global::keep_graph = bool\{ true \}{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 6} of file {\b Global.h}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Helper Namespace Reference\par \pard\plain 
{\tc\tcl2 \v Helper}
{\xe \v Helper}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Timer}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Beam::Losses Struct Reference\par \pard\plain 
{\tc\tcl2 \v Beam::Losses}
{\xe \v Beam::Losses}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct to hold different loss components. }}\par
{
{\f2 #include <Beam.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b total}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b physics}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b boundary}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b l2_reg}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct to hold different loss components. \par
}{
Definition at line {\b 49} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v boundary\:Beam::Losses}
{\xe \v Beam::Losses\:boundary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::Losses::boundary}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 52} of file {\b Beam.h}.}\par
}
{\xe \v l2_reg\:Beam::Losses}
{\xe \v Beam::Losses\:l2_reg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::Losses::l2_reg}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b Beam.h}.}\par
}
{\xe \v physics\:Beam::Losses}
{\xe \v Beam::Losses\:physics}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::Losses::physics}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 51} of file {\b Beam.h}.}\par
}
{\xe \v total\:Beam::Losses}
{\xe \v Beam::Losses\:total}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::Losses::total}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 50} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Beam.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Beam::PINN Class Reference\par \pard\plain 
{\tc\tcl2 \v Beam::PINN}
{\xe \v Beam::PINN}
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A Physics-Informed Neural Network ({\b PINN}) model for 1D Euler-Bernoulli beam deflection. }}\par
{
{\f2 #include <Beam.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b PINN} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b forward} (torch::Tensor x)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward pass of the {\b PINN}. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A Physics-Informed Neural Network ({\b PINN}) model for 1D Euler-Bernoulli beam deflection. \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Network architecture: Input: x \'E2\'88\'88 \'E2\'84\'9D\'C2\'B9 Hidden: two fully-connected layers with tanh activation Output: u(x) \'E2\'88\'88 \'E2\'84\'9D\'C2\'B9 \par
}{
Definition at line {\b 16} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v PINN\:Beam::PINN}
{\xe \v Beam::PINN\:PINN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Beam::PINN::PINN (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 18} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v forward\:Beam::PINN}
{\xe \v Beam::PINN\:forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
torch::Tensor Beam::PINN::forward (torch::Tensor  {\i x}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Forward pass of the {\b PINN}. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i x} \cell }{Input tensor of shape (N, 1) \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Network output tensor of shape (N, 1) \par
}}}{
Definition at line {\b 35} of file {\b Beam.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Beam.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Helper::Timer Class Reference\par \pard\plain 
{\tc\tcl2 \v Helper::Timer}
{\xe \v Helper::Timer}
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
\par
{
{\f2 #include <Timer.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Timer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOutputAtExit} (bool _outputAtExit)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::chrono::steady_clock::time_point {\b getStart} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::chrono::milliseconds {\b getDuration} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Timer} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
Definition at line {\b 9} of file {\b Timer.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v Timer\:Helper::Timer}
{\xe \v Helper::Timer\:Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Helper::Timer::Timer (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 12} of file {\b Timer.h}.}\par
}
{\xe \v ~Timer\:Helper::Timer}
{\xe \v Helper::Timer\:~Timer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Helper::Timer::~Timer (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 30} of file {\b Timer.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v getDuration\:Helper::Timer}
{\xe \v Helper::Timer\:getDuration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::chrono::milliseconds Helper::Timer::getDuration () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 25} of file {\b Timer.h}.}\par
}
{\xe \v getStart\:Helper::Timer}
{\xe \v Helper::Timer\:getStart}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::chrono::steady_clock::time_point Helper::Timer::getStart () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 21} of file {\b Timer.h}.}\par
}
{\xe \v setOutputAtExit\:Helper::Timer}
{\xe \v Helper::Timer\:setOutputAtExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Helper::Timer::setOutputAtExit (bool  {\i _outputAtExit}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b Timer.h}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/{\b Timer.h}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/CMakeCCompilerId.c File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/CMakeCCompilerId.c}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b __has_include}(x)\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b COMPILER_ID}\~ ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STRINGIFY_HELPER}(X)\~ #X\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STRINGIFY}(X)\~ {\b STRINGIFY_HELPER}(X)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PLATFORM_ID}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARCHITECTURE_ID}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DEC}(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HEX}(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b C_VERSION}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v __has_include\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:__has_include}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define __has_include( x)\~ 0}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 17} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v ARCHITECTURE_ID\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:ARCHITECTURE_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARCHITECTURE_ID}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 745} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v C_VERSION\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:C_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define C_VERSION}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 834} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v COMPILER_ID\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:COMPILER_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define COMPILER_ID\~ ""}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 448} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v DEC\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:DEC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEC( n)}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   ({\cf23 '0'} + (((n) / 10000000)%10)), \\\par
  ({\cf23 '0'} + (((n) / 1000000)%10)),  \\\par
  ({\cf23 '0'} + (((n) / 100000)%10)),   \\\par
  ({\cf23 '0'} + (((n) / 10000)%10)),    \\\par
  ({\cf23 '0'} + (((n) / 1000)%10)),     \\\par
  ({\cf23 '0'} + (((n) / 100)%10)),      \\\par
  ({\cf23 '0'} + (((n) / 10)%10)),       \\\par
  ({\cf23 '0'} +  ((n) % 10))\par
}
{
Definition at line {\b 749} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v HEX\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:HEX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HEX( n)}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   ({\cf23 '0'} + ((n)>>28 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>24 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>20 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>16 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>12 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>8  & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>4  & 0xF)), \\\par
  ({\cf23 '0'} + ((n)     & 0xF))\par
}
{
Definition at line {\b 760} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v PLATFORM_ID\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:PLATFORM_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PLATFORM_ID}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 579} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v STRINGIFY\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STRINGIFY( X)\~ {\b STRINGIFY_HELPER}(X)}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 469} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v STRINGIFY_HELPER\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:STRINGIFY_HELPER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STRINGIFY_HELPER( X)\~ #X}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 468} of file {\b CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 868} of file {\b CMakeCCompilerId.c}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 826} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v info_compiler\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 455} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
\par
\par
\par
\par
\par
  {\cf22 "OFF"}\par
\par
{\cf22 "]"}\par
}
{
Definition at line {\b 850} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v info_language_standard_default\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
  {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"}\par
}
{
Definition at line {\b 847} of file {\b CMakeCCompilerId.c}.}\par
}
{\xe \v info_platform\:CMakeCCompilerId.c}
{\xe \v CMakeCCompilerId.c\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 825} of file {\b CMakeCCompilerId.c}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CMakeCCompilerId.c\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/CMakeCCompilerId.c}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdC/CMakeCCompilerId.c}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #ifdef __cplusplus}\par
00002 {\cf21 # error "A C++ compiler has been selected for C."}\par
00003 {\cf21 #endif}\par
00004 \par
00005 {\cf21 #if defined(__18CXX)}\par
00006 {\cf21 # define ID_VOID_MAIN}\par
00007 {\cf21 #endif}\par
00008 {\cf21 #if defined(__CLASSIC_C__)}\par
00009 {\cf20 /* cv-qualifiers did not exist in K&R C */}\par
00010 {\cf21 # define const}\par
00011 {\cf21 # define volatile}\par
00012 {\cf21 #endif}\par
00013 \par
00014 {\cf21 #if !defined(__has_include)}\par
00015 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00016 {\cf20    always no.  */}\par
00017 {\cf21 #  define __has_include(x) 0}\par
00018 {\cf21 #endif}\par
00019 \par
00020 \par
00021 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00022 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00023 \par
00024 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00025 {\cf21 # define COMPILER_ID "Intel"}\par
00026 {\cf21 # if defined(_MSC_VER)}\par
00027 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00028 {\cf21 # endif}\par
00029 {\cf21 # if defined(__GNUC__)}\par
00030 {\cf21 #  define SIMULATE_ID "GNU"}\par
00031 {\cf21 # endif}\par
00032   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00033 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00034 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00035 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00036 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00037 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00038 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00039 {\cf21 #  else}\par
00040 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00041 {\cf21 #  endif}\par
00042 {\cf21 # else}\par
00043 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00044 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00045    {\cf20 /* The third version component from --version is an update index,}\par
00046 {\cf20       but no macro is provided for it.  */}\par
00047 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00048 {\cf21 # endif}\par
00049 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00050    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00051 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00052 {\cf21 # endif}\par
00053 {\cf21 # if defined(_MSC_VER)}\par
00054    {\cf20 /* _MSC_VER = VVRR */}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00056 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00057 {\cf21 # endif}\par
00058 {\cf21 # if defined(__GNUC__)}\par
00059 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00060 {\cf21 # elif defined(__GNUG__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00062 {\cf21 # endif}\par
00063 {\cf21 # if defined(__GNUC_MINOR__)}\par
00064 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00065 {\cf21 # endif}\par
00066 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00067 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00068 {\cf21 # endif}\par
00069 \par
00070 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00071 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00072 {\cf21 #if defined(_MSC_VER)}\par
00073 {\cf21 # define SIMULATE_ID "MSVC"}\par
00074 {\cf21 #endif}\par
00075 {\cf21 #if defined(__GNUC__)}\par
00076 {\cf21 # define SIMULATE_ID "GNU"}\par
00077 {\cf21 #endif}\par
00078 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00079 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00080 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00081 {\cf20  */}\par
00082 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00083 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00084 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00085 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00086 {\cf21 #else}\par
00087 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00088 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00089 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00090 {\cf21 #endif}\par
00091 {\cf21 #if defined(_MSC_VER)}\par
00092   {\cf20 /* _MSC_VER = VVRR */}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00094 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00095 {\cf21 #endif}\par
00096 {\cf21 #if defined(__GNUC__)}\par
00097 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00098 {\cf21 #elif defined(__GNUG__)}\par
00099 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00100 {\cf21 #endif}\par
00101 {\cf21 #if defined(__GNUC_MINOR__)}\par
00102 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00103 {\cf21 #endif}\par
00104 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00105 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00106 {\cf21 #endif}\par
00107 \par
00108 {\cf21 #elif defined(__PATHCC__)}\par
00109 {\cf21 # define COMPILER_ID "PathScale"}\par
00110 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00111 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00112 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00113 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00114 {\cf21 # endif}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00117 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00118 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00119 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00120 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00121 \par
00122 {\cf21 #elif defined(__BORLANDC__)}\par
00123 {\cf21 # define COMPILER_ID "Borland"}\par
00124   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00127 \par
00128 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00129 {\cf21 # define COMPILER_ID "Watcom"}\par
00130    {\cf20 /* __WATCOMC__ = VVRR */}\par
00131 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00132 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00133 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00134 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00135 {\cf21 # endif}\par
00136 \par
00137 {\cf21 #elif defined(__WATCOMC__)}\par
00138 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00139    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00140 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00141 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00142 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00143 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00144 {\cf21 # endif}\par
00145 \par
00146 {\cf21 #elif defined(__SUNPRO_C)}\par
00147 {\cf21 # define COMPILER_ID "SunPro"}\par
00148 {\cf21 # if __SUNPRO_C >= 0x5100}\par
00149    {\cf20 /* __SUNPRO_C = 0xVRRP */}\par
00150 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)}\par
00151 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)}\par
00152 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00153 {\cf21 # else}\par
00154    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00155 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)}\par
00156 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)}\par
00157 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)}\par
00158 {\cf21 # endif}\par
00159 \par
00160 {\cf21 #elif defined(__HP_cc)}\par
00161 {\cf21 # define COMPILER_ID "HP"}\par
00162   {\cf20 /* __HP_cc = VVRRPP */}\par
00163 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)}\par
00164 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)}\par
00165 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)}\par
00166 \par
00167 {\cf21 #elif defined(__DECC)}\par
00168 {\cf21 # define COMPILER_ID "Compaq"}\par
00169   {\cf20 /* __DECC_VER = VVRRTPPPP */}\par
00170 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)}\par
00171 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)}\par
00172 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)}\par
00173 \par
00174 {\cf21 #elif defined(__IBMC__) && defined(__COMPILER_VER__)}\par
00175 {\cf21 # define COMPILER_ID "zOS"}\par
00176   {\cf20 /* __IBMC__ = VRP */}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00180 \par
00181 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00182 {\cf21 # define COMPILER_ID "IBMClang"}\par
00183 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00184 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00185 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00186 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00187 \par
00188 \par
00189 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00190 {\cf21 # define COMPILER_ID "XLClang"}\par
00191 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00192 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00193 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00194 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00195 \par
00196 \par
00197 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800}\par
00198 {\cf21 # define COMPILER_ID "XL"}\par
00199   {\cf20 /* __IBMC__ = VRP */}\par
00200 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00201 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00202 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00203 \par
00204 {\cf21 #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800}\par
00205 {\cf21 # define COMPILER_ID "VisualAge"}\par
00206   {\cf20 /* __IBMC__ = VRP */}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)}\par
00209 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)}\par
00210 \par
00211 {\cf21 #elif defined(__NVCOMPILER)}\par
00212 {\cf21 # define COMPILER_ID "NVHPC"}\par
00213 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00214 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00215 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00216 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00217 {\cf21 # endif}\par
00218 \par
00219 {\cf21 #elif defined(__PGI)}\par
00220 {\cf21 # define COMPILER_ID "PGI"}\par
00221 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00222 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00223 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00224 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00225 {\cf21 # endif}\par
00226 \par
00227 {\cf21 #elif defined(__clang__) && defined(__cray__)}\par
00228 {\cf21 # define COMPILER_ID "CrayClang"}\par
00229 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__cray_major__)}\par
00230 {\cf21 # define COMPILER_VERSION_MINOR DEC(__cray_minor__)}\par
00231 {\cf21 # define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)}\par
00232 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00233 \par
00234 \par
00235 {\cf21 #elif defined(_CRAYC)}\par
00236 {\cf21 # define COMPILER_ID "Cray"}\par
00237 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00238 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00239 \par
00240 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00241 {\cf21 # define COMPILER_ID "TI"}\par
00242   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00243 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00244 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00245 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00246 \par
00247 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00248 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00249 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00250 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00251 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00252 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00253 \par
00254 \par
00255 {\cf21 #elif defined(__FUJITSU)}\par
00256 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00257 {\cf21 # if defined(__FCC_version__)}\par
00258 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00259 {\cf21 # elif defined(__FCC_major__)}\par
00260 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00261 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00262 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00263 {\cf21 # endif}\par
00264 {\cf21 # if defined(__fcc_version)}\par
00265 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00266 {\cf21 # elif defined(__FCC_VERSION)}\par
00267 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00268 {\cf21 # endif}\par
00269 \par
00270 \par
00271 {\cf21 #elif defined(__ghs__)}\par
00272 {\cf21 # define COMPILER_ID "GHS"}\par
00273 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00274 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00275 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00276 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00277 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00278 {\cf21 # endif}\par
00279 \par
00280 {\cf21 #elif defined(__TASKING__)}\par
00281 {\cf21 # define COMPILER_ID "Tasking"}\par
00282 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00283 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00284 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00285 \par
00286 {\cf21 #elif defined(__ORANGEC__)}\par
00287 {\cf21 # define COMPILER_ID "OrangeC"}\par
00288 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)}\par
00289 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)}\par
00290 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)}\par
00291 \par
00292 {\cf21 #elif defined(__TINYC__)}\par
00293 {\cf21 # define COMPILER_ID "TinyCC"}\par
00294 \par
00295 {\cf21 #elif defined(__BCC__)}\par
00296 {\cf21 # define COMPILER_ID "Bruce"}\par
00297 \par
00298 {\cf21 #elif defined(__SCO_VERSION__)}\par
00299 {\cf21 # define COMPILER_ID "SCO"}\par
00300 \par
00301 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00302 {\cf21 # define COMPILER_ID "ARMCC"}\par
00303 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00304   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00305 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00306 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00307 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00308 {\cf21 #else}\par
00309   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00310 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00311 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00312 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00313 {\cf21 #endif}\par
00314 \par
00315 \par
00316 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00317 {\cf21 # define COMPILER_ID "AppleClang"}\par
00318 {\cf21 # if defined(_MSC_VER)}\par
00319 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00320 {\cf21 # endif}\par
00321 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00322 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00323 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00324 {\cf21 # if defined(_MSC_VER)}\par
00325    {\cf20 /* _MSC_VER = VVRR */}\par
00326 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00327 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00328 {\cf21 # endif}\par
00329 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00330 \par
00331 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00332 {\cf21 # define COMPILER_ID "ARMClang"}\par
00333 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00334 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00335 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)}\par
00336 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00337 \par
00338 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00339 {\cf21 # define COMPILER_ID "TIClang"}\par
00340 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ti_major__)}\par
00341 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ti_minor__)}\par
00342 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)}\par
00343 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ti_version__)}\par
00344 \par
00345 {\cf21 #elif defined(__clang__)}\par
00346 {\cf21 # define COMPILER_ID "Clang"}\par
00347 {\cf21 # if defined(_MSC_VER)}\par
00348 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00349 {\cf21 # endif}\par
00350 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00351 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00352 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00353 {\cf21 # if defined(_MSC_VER)}\par
00354    {\cf20 /* _MSC_VER = VVRR */}\par
00355 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00356 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00357 {\cf21 # endif}\par
00358 \par
00359 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00360 {\cf21 # define COMPILER_ID "LCC"}\par
00361 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)}\par
00362 {\cf21 # define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)}\par
00363 {\cf21 # if defined(__LCC_MINOR__)}\par
00364 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00365 {\cf21 # endif}\par
00366 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00367 {\cf21 #  define SIMULATE_ID "GNU"}\par
00368 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00369 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00370 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00371 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00372 {\cf21 #  endif}\par
00373 {\cf21 # endif}\par
00374 \par
00375 {\cf21 #elif defined(__GNUC__)}\par
00376 {\cf21 # define COMPILER_ID "GNU"}\par
00377 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00378 {\cf21 # if defined(__GNUC_MINOR__)}\par
00379 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00380 {\cf21 # endif}\par
00381 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00382 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00383 {\cf21 # endif}\par
00384 \par
00385 {\cf21 #elif defined(_MSC_VER)}\par
00386 {\cf21 # define COMPILER_ID "MSVC"}\par
00387   {\cf20 /* _MSC_VER = VVRR */}\par
00388 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00389 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00390 {\cf21 # if defined(_MSC_FULL_VER)}\par
00391 {\cf21 #  if _MSC_VER >= 1400}\par
00392     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00393 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00394 {\cf21 #  else}\par
00395     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00396 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00397 {\cf21 #  endif}\par
00398 {\cf21 # endif}\par
00399 {\cf21 # if defined(_MSC_BUILD)}\par
00400 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00401 {\cf21 # endif}\par
00402 \par
00403 {\cf21 #elif defined(_ADI_COMPILER)}\par
00404 {\cf21 # define COMPILER_ID "ADSP"}\par
00405 {\cf21 #if defined(__VERSIONNUM__)}\par
00406   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00407 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00408 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00409 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00410 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00411 {\cf21 #endif}\par
00412 \par
00413 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00414 {\cf21 # define COMPILER_ID "IAR"}\par
00415 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00416 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00417 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00418 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00419 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00420 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00421 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00422 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00423 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00424 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00425 {\cf21 # endif}\par
00426 \par
00427 {\cf21 #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)}\par
00428 {\cf21 # define COMPILER_ID "SDCC"}\par
00429 {\cf21 # if defined(__SDCC_VERSION_MAJOR)}\par
00430 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)}\par
00431 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)}\par
00432 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)}\par
00433 {\cf21 # else}\par
00434   {\cf20 /* SDCC = VRP */}\par
00435 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(SDCC/100)}\par
00436 {\cf21 #  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)}\par
00437 {\cf21 #  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)}\par
00438 {\cf21 # endif}\par
00439 \par
00440 \par
00441 {\cf20 /* These compilers are either not known or too old to define an}\par
00442 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00443 {\cf20   it is the native compiler.  */}\par
00444 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00445 {\cf21 # define COMPILER_ID "HP"}\par
00446 \par
00447 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00448 {\cf21 # define COMPILER_ID ""}\par
00449 {\cf21 #endif}\par
00450 \par
00451 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00452 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00453 {\cf20    because some compilers will just produce instructions to fill the}\par
00454 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00455 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00456 {\cf21 #ifdef SIMULATE_ID}\par
00457 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00458 {\cf21 #endif}\par
00459 \par
00460 {\cf21 #ifdef __QNXNTO__}\par
00461 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00462 {\cf21 #endif}\par
00463 \par
00464 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00465 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00466 {\cf21 #endif}\par
00467 \par
00468 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00469 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00470 \par
00471 {\cf20 /* Identify known platforms by name.  */}\par
00472 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00473 {\cf21 # define PLATFORM_ID "Linux"}\par
00474 \par
00475 {\cf21 #elif defined(__MSYS__)}\par
00476 {\cf21 # define PLATFORM_ID "MSYS"}\par
00477 \par
00478 {\cf21 #elif defined(__CYGWIN__)}\par
00479 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00480 \par
00481 {\cf21 #elif defined(__MINGW32__)}\par
00482 {\cf21 # define PLATFORM_ID "MinGW"}\par
00483 \par
00484 {\cf21 #elif defined(__APPLE__)}\par
00485 {\cf21 # define PLATFORM_ID "Darwin"}\par
00486 \par
00487 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00488 {\cf21 # define PLATFORM_ID "Windows"}\par
00489 \par
00490 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00491 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00492 \par
00493 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00494 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00495 \par
00496 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00497 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00498 \par
00499 {\cf21 #elif defined(__sun) || defined(sun)}\par
00500 {\cf21 # define PLATFORM_ID "SunOS"}\par
00501 \par
00502 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00503 {\cf21 # define PLATFORM_ID "AIX"}\par
00504 \par
00505 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00506 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00507 \par
00508 {\cf21 #elif defined(__HAIKU__)}\par
00509 {\cf21 # define PLATFORM_ID "Haiku"}\par
00510 \par
00511 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00512 {\cf21 # define PLATFORM_ID "BeOS"}\par
00513 \par
00514 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00515 {\cf21 # define PLATFORM_ID "QNX"}\par
00516 \par
00517 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00518 {\cf21 # define PLATFORM_ID "Tru64"}\par
00519 \par
00520 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00521 {\cf21 # define PLATFORM_ID "RISCos"}\par
00522 \par
00523 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00524 {\cf21 # define PLATFORM_ID "SINIX"}\par
00525 \par
00526 {\cf21 #elif defined(__UNIX_SV__)}\par
00527 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00528 \par
00529 {\cf21 #elif defined(__bsdos__)}\par
00530 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00531 \par
00532 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00533 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00534 \par
00535 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00536 {\cf21 # define PLATFORM_ID "OSF1"}\par
00537 \par
00538 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00539 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00540 \par
00541 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00542 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00543 \par
00544 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00545 {\cf21 # define PLATFORM_ID "Xenix"}\par
00546 \par
00547 {\cf21 #elif defined(__WATCOMC__)}\par
00548 {\cf21 # if defined(__LINUX__)}\par
00549 {\cf21 #  define PLATFORM_ID "Linux"}\par
00550 \par
00551 {\cf21 # elif defined(__DOS__)}\par
00552 {\cf21 #  define PLATFORM_ID "DOS"}\par
00553 \par
00554 {\cf21 # elif defined(__OS2__)}\par
00555 {\cf21 #  define PLATFORM_ID "OS2"}\par
00556 \par
00557 {\cf21 # elif defined(__WINDOWS__)}\par
00558 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00559 \par
00560 {\cf21 # elif defined(__VXWORKS__)}\par
00561 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00562 \par
00563 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00564 {\cf21 #  define PLATFORM_ID}\par
00565 {\cf21 # endif}\par
00566 \par
00567 {\cf21 #elif defined(__INTEGRITY)}\par
00568 {\cf21 # if defined(INT_178B)}\par
00569 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00570 \par
00571 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00572 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00573 {\cf21 # endif}\par
00574 \par
00575 {\cf21 # elif defined(_ADI_COMPILER)}\par
00576 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00577 \par
00578 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00579 {\cf21 # define PLATFORM_ID}\par
00580 \par
00581 {\cf21 #endif}\par
00582 \par
00583 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00584 {\cf20    the architecture of the compiler being used.  This is because}\par
00585 {\cf20    the compilers do not have flags that can change the architecture,}\par
00586 {\cf20    but rather depend on which compiler is being used}\par
00587 {\cf20 */}\par
00588 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00589 {\cf21 # if defined(_M_IA64)}\par
00590 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00591 \par
00592 {\cf21 # elif defined(_M_ARM64EC)}\par
00593 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00594 \par
00595 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00596 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00597 \par
00598 {\cf21 # elif defined(_M_IX86)}\par
00599 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00600 \par
00601 {\cf21 # elif defined(_M_ARM64)}\par
00602 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00603 \par
00604 {\cf21 # elif defined(_M_ARM)}\par
00605 {\cf21 #  if _M_ARM == 4}\par
00606 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00607 {\cf21 #  elif _M_ARM == 5}\par
00608 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00609 {\cf21 #  else}\par
00610 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00611 {\cf21 #  endif}\par
00612 \par
00613 {\cf21 # elif defined(_M_MIPS)}\par
00614 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00615 \par
00616 {\cf21 # elif defined(_M_SH)}\par
00617 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00618 \par
00619 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00620 {\cf21 #  define ARCHITECTURE_ID ""}\par
00621 {\cf21 # endif}\par
00622 \par
00623 {\cf21 #elif defined(__WATCOMC__)}\par
00624 {\cf21 # if defined(_M_I86)}\par
00625 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00626 \par
00627 {\cf21 # elif defined(_M_IX86)}\par
00628 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00629 \par
00630 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00631 {\cf21 #  define ARCHITECTURE_ID ""}\par
00632 {\cf21 # endif}\par
00633 \par
00634 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00635 {\cf21 # if defined(__ICCARM__)}\par
00636 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00637 \par
00638 {\cf21 # elif defined(__ICCRX__)}\par
00639 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00640 \par
00641 {\cf21 # elif defined(__ICCRH850__)}\par
00642 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00643 \par
00644 {\cf21 # elif defined(__ICCRL78__)}\par
00645 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00646 \par
00647 {\cf21 # elif defined(__ICCRISCV__)}\par
00648 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00649 \par
00650 {\cf21 # elif defined(__ICCAVR__)}\par
00651 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00652 \par
00653 {\cf21 # elif defined(__ICC430__)}\par
00654 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00655 \par
00656 {\cf21 # elif defined(__ICCV850__)}\par
00657 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00658 \par
00659 {\cf21 # elif defined(__ICC8051__)}\par
00660 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00661 \par
00662 {\cf21 # elif defined(__ICCSTM8__)}\par
00663 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00664 \par
00665 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00666 {\cf21 #  define ARCHITECTURE_ID ""}\par
00667 {\cf21 # endif}\par
00668 \par
00669 {\cf21 #elif defined(__ghs__)}\par
00670 {\cf21 # if defined(__PPC64__)}\par
00671 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00672 \par
00673 {\cf21 # elif defined(__ppc__)}\par
00674 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00675 \par
00676 {\cf21 # elif defined(__ARM__)}\par
00677 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00678 \par
00679 {\cf21 # elif defined(__x86_64__)}\par
00680 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00681 \par
00682 {\cf21 # elif defined(__i386__)}\par
00683 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00684 \par
00685 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00686 {\cf21 #  define ARCHITECTURE_ID ""}\par
00687 {\cf21 # endif}\par
00688 \par
00689 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00690 {\cf21 # if defined(__ARM_ARCH)}\par
00691 {\cf21 #  define ARCHITECTURE_ID "Arm"}\par
00692 \par
00693 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00694 {\cf21 #  define ARCHITECTURE_ID ""}\par
00695 {\cf21 # endif}\par
00696 \par
00697 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00698 {\cf21 # if defined(__TI_ARM__)}\par
00699 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00700 \par
00701 {\cf21 # elif defined(__MSP430__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00703 \par
00704 {\cf21 # elif defined(__TMS320C28XX__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00706 \par
00707 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00709 \par
00710 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00711 {\cf21 #  define ARCHITECTURE_ID ""}\par
00712 {\cf21 # endif}\par
00713 \par
00714 {\cf21 # elif defined(__ADSPSHARC__)}\par
00715 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00716 \par
00717 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00718 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00719 \par
00720 {\cf21 #elif defined(__TASKING__)}\par
00721 \par
00722 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00723 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00724 \par
00725 {\cf21 # elif defined(__CMCS__)}\par
00726 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00727 \par
00728 {\cf21 # elif defined(__CARM__)}\par
00729 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00730 \par
00731 {\cf21 # elif defined(__CARC__)}\par
00732 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00733 \par
00734 {\cf21 # elif defined(__C51__)}\par
00735 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00736 \par
00737 {\cf21 # elif defined(__CPCP__)}\par
00738 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00739 \par
00740 {\cf21 # else}\par
00741 {\cf21 #  define ARCHITECTURE_ID ""}\par
00742 {\cf21 # endif}\par
00743 \par
00744 {\cf21 #else}\par
00745 {\cf21 #  define ARCHITECTURE_ID}\par
00746 {\cf21 #endif}\par
00747 \par
00748 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00749 {\cf21 #define DEC(n)                   \\}\par
00750 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00751 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00752 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00753 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00754 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00755 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00756 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00757 {\cf21   ('0' +  ((n) % 10))}\par
00758 \par
00759 {\cf20 /* Convert integer to hex digit literals.  */}\par
00760 {\cf21 #define HEX(n)             \\}\par
00761 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00762 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00763 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00764 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00765 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00766 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00767 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00768 {\cf21   ('0' + ((n)     & 0xF))}\par
00769 \par
00770 {\cf20 /* Construct a string literal encoding the version number. */}\par
00771 {\cf21 #ifdef COMPILER_VERSION}\par
00772 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00773 \par
00774 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00775 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00776 {\cf18 char} {\cf17 const} info_version[] = \{\par
00777   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00778   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00779   COMPILER_VERSION_MAJOR,\par
00780 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00781   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00782 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00783    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00784 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00785     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00786 {\cf21 #   endif}\par
00787 {\cf21 #  endif}\par
00788 {\cf21 # endif}\par
00789   {\cf23 ']'},{\cf23 '\\0'}\};\par
00790 {\cf21 #endif}\par
00791 \par
00792 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00793 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00794 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00795   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00796   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00797   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00798   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00799 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00800 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00801 {\cf21 #endif}\par
00802 \par
00803 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00804 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00805 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00806   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00807   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00808   SIMULATE_VERSION_MAJOR,\par
00809 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00810   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00811 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00812    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00813 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00814     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00815 {\cf21 #   endif}\par
00816 {\cf21 #  endif}\par
00817 {\cf21 # endif}\par
00818   {\cf23 ']'},{\cf23 '\\0'}\};\par
00819 {\cf21 #endif}\par
00820 \par
00821 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00822 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00823 {\cf20    because some compilers will just produce instructions to fill the}\par
00824 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00825 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00826 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00827 \par
00828 \par
00829 \par
00830 {\cf21 #if !defined(__STDC__) && !defined(__clang__)}\par
00831 {\cf21 # if defined(_MSC_VER) || defined(__ibmxl__) || defined(__IBMC__)}\par
00832 {\cf21 #  define C_VERSION "90"}\par
00833 {\cf21 # else}\par
00834 {\cf21 #  define C_VERSION}\par
00835 {\cf21 # endif}\par
00836 {\cf21 #elif __STDC_VERSION__ > 201710L}\par
00837 {\cf21 # define C_VERSION "23"}\par
00838 {\cf21 #elif __STDC_VERSION__ >= 201710L}\par
00839 {\cf21 # define C_VERSION "17"}\par
00840 {\cf21 #elif __STDC_VERSION__ >= 201000L}\par
00841 {\cf21 # define C_VERSION "11"}\par
00842 {\cf21 #elif __STDC_VERSION__ >= 199901L}\par
00843 {\cf21 # define C_VERSION "99"}\par
00844 {\cf21 #else}\par
00845 {\cf21 # define C_VERSION "90"}\par
00846 {\cf21 #endif}\par
00847 {\cf17 const} {\cf18 char}* info_language_standard_default =\par
00848   {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["} C_VERSION {\cf22 "]"};\par
00849 \par
00850 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00851 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00852 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00853 {\cf21   !defined(__STRICT_ANSI__)}\par
00854   {\cf22 "ON"}\par
00855 {\cf21 #else}\par
00856   {\cf22 "OFF"}\par
00857 {\cf21 #endif}\par
00858 {\cf22 "]"};\par
00859 \par
00860 {\cf20 /*--------------------------------------------------------------------------*/}\par
00861 \par
00862 {\cf21 #ifdef ID_VOID_MAIN}\par
00863 {\cf18 void} main() \{\}\par
00864 {\cf21 #else}\par
00865 {\cf21 # if defined(__CLASSIC_C__)}\par
00866 {\cf18 int} main(argc, argv) {\cf18 int} argc; {\cf18 char} *argv[];\par
00867 {\cf21 # else}\par
00868 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00869 {\cf21 # endif}\par
00870 \{\par
00871   {\cf18 int} require = 0;\par
00872   require += info_compiler[argc];\par
00873   require += info_platform[argc];\par
00874   require += info_arch[argc];\par
00875 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00876   require += info_version[argc];\par
00877 {\cf21 #endif}\par
00878 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00879   require += info_version_internal[argc];\par
00880 {\cf21 #endif}\par
00881 {\cf21 #ifdef SIMULATE_ID}\par
00882   require += info_simulate[argc];\par
00883 {\cf21 #endif}\par
00884 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00885   require += info_simulate_version[argc];\par
00886 {\cf21 #endif}\par
00887 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00888   require += info_cray[argc];\par
00889 {\cf21 #endif}\par
00890   require += info_language_standard_default[argc];\par
00891   require += info_language_extensions_default[argc];\par
00892   (void)argv;\par
00893   {\cf19 return} require;\par
00894 \}\par
00895 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/CMakeCXXCompilerId.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b __has_include}(x)\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b COMPILER_ID}\~ ""\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STRINGIFY_HELPER}(X)\~ #X\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b STRINGIFY}(X)\~ {\b STRINGIFY_HELPER}(X)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b PLATFORM_ID}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ARCHITECTURE_ID}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DEC}(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b HEX}(n)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CXX_STD}\~ __cplusplus\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_compiler} = "INFO" ":" "compiler[" COMPILER_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_platform} = "INFO" ":" "platform[" PLATFORM_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char const  * {\b info_arch} = "INFO" ":" "arch[" ARCHITECTURE_ID "]"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_standard_default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b info_language_extensions_default}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v __has_include\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:__has_include}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define __has_include( x)\~ 0}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 11} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v ARCHITECTURE_ID\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:ARCHITECTURE_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ARCHITECTURE_ID}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 724} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v COMPILER_ID\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:COMPILER_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define COMPILER_ID\~ ""}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 427} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v CXX_STD\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:CXX_STD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CXX_STD\~ __cplusplus}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 822} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v DEC\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:DEC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DEC( n)}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   ({\cf23 '0'} + (((n) / 10000000)%10)), \\\par
  ({\cf23 '0'} + (((n) / 1000000)%10)),  \\\par
  ({\cf23 '0'} + (((n) / 100000)%10)),   \\\par
  ({\cf23 '0'} + (((n) / 10000)%10)),    \\\par
  ({\cf23 '0'} + (((n) / 1000)%10)),     \\\par
  ({\cf23 '0'} + (((n) / 100)%10)),      \\\par
  ({\cf23 '0'} + (((n) / 10)%10)),       \\\par
  ({\cf23 '0'} +  ((n) % 10))\par
}
{
Definition at line {\b 728} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v HEX\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:HEX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define HEX( n)}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   ({\cf23 '0'} + ((n)>>28 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>24 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>20 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>16 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>12 & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>8  & 0xF)), \\\par
  ({\cf23 '0'} + ((n)>>4  & 0xF)), \\\par
  ({\cf23 '0'} + ((n)     & 0xF))\par
}
{
Definition at line {\b 739} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v PLATFORM_ID\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:PLATFORM_ID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define PLATFORM_ID}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 558} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v STRINGIFY\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STRINGIFY( X)\~ {\b STRINGIFY_HELPER}(X)}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 448} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v STRINGIFY_HELPER\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:STRINGIFY_HELPER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define STRINGIFY_HELPER( X)\~ #X}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 447} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 853} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v info_arch\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_arch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]"}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 805} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_compiler\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_compiler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]"}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 434} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_extensions_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_extensions_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_extensions_default}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
\par
\par
\par
\par
\par
  {\cf22 "OFF"}\par
\par
{\cf22 "]"}\par
}
{
Definition at line {\b 841} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_language_standard_default\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_language_standard_default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* info_language_standard_default}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
  {\cf22 "98"}\par
\par
{\cf22 "]"}\par
}
{
Definition at line {\b 825} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
{\xe \v info_platform\:CMakeCXXCompilerId.cpp}
{\xe \v CMakeCXXCompilerId.cpp\:info_platform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]"}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 804} of file {\b CMakeCXXCompilerId.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CMakeCXXCompilerId.cpp\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/build/CMakeFiles/3.29.2/CompilerIdCXX/CMakeCXXCompilerId.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /* This source file must have a .cpp extension so that all C++ compilers}\par
00002 {\cf20    recognize the extension without flags.  Borland does not know .cxx for}\par
00003 {\cf20    example.  */}\par
00004 {\cf21 #ifndef __cplusplus}\par
00005 {\cf21 # error "A C compiler has been selected for C++."}\par
00006 {\cf21 #endif}\par
00007 \par
00008 {\cf21 #if !defined(__has_include)}\par
00009 {\cf20 /* If the compiler does not have __has_include, pretend the answer is}\par
00010 {\cf20    always no.  */}\par
00011 {\cf21 #  define __has_include(x) 0}\par
00012 {\cf21 #endif}\par
00013 \par
00014 \par
00015 {\cf20 /* Version number components: V=Version, R=Revision, P=Patch}\par
00016 {\cf20    Version date components:   YYYY=Year, MM=Month,   DD=Day  */}\par
00017 \par
00018 {\cf21 #if defined(__INTEL_COMPILER) || defined(__ICC)}\par
00019 {\cf21 # define COMPILER_ID "Intel"}\par
00020 {\cf21 # if defined(_MSC_VER)}\par
00021 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00022 {\cf21 # endif}\par
00023 {\cf21 # if defined(__GNUC__)}\par
00024 {\cf21 #  define SIMULATE_ID "GNU"}\par
00025 {\cf21 # endif}\par
00026   {\cf20 /* __INTEL_COMPILER = VRP prior to 2021, and then VVVV for 2021 and later,}\par
00027 {\cf20      except that a few beta releases use the old format with V=2021.  */}\par
00028 {\cf21 # if __INTEL_COMPILER < 2021 || __INTEL_COMPILER == 202110 || __INTEL_COMPILER == 202111}\par
00029 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)}\par
00030 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)}\par
00031 {\cf21 #  if defined(__INTEL_COMPILER_UPDATE)}\par
00032 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)}\par
00033 {\cf21 #  else}\par
00034 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)}\par
00035 {\cf21 #  endif}\par
00036 {\cf21 # else}\par
00037 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER)}\par
00038 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER_UPDATE)}\par
00039    {\cf20 /* The third version component from --version is an update index,}\par
00040 {\cf20       but no macro is provided for it.  */}\par
00041 {\cf21 #  define COMPILER_VERSION_PATCH DEC(0)}\par
00042 {\cf21 # endif}\par
00043 {\cf21 # if defined(__INTEL_COMPILER_BUILD_DATE)}\par
00044    {\cf20 /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */}\par
00045 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)}\par
00046 {\cf21 # endif}\par
00047 {\cf21 # if defined(_MSC_VER)}\par
00048    {\cf20 /* _MSC_VER = VVRR */}\par
00049 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00050 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00051 {\cf21 # endif}\par
00052 {\cf21 # if defined(__GNUC__)}\par
00053 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00054 {\cf21 # elif defined(__GNUG__)}\par
00055 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00056 {\cf21 # endif}\par
00057 {\cf21 # if defined(__GNUC_MINOR__)}\par
00058 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00059 {\cf21 # endif}\par
00060 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00061 {\cf21 #  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00062 {\cf21 # endif}\par
00063 \par
00064 {\cf21 #elif (defined(__clang__) && defined(__INTEL_CLANG_COMPILER)) || defined(__INTEL_LLVM_COMPILER)}\par
00065 {\cf21 # define COMPILER_ID "IntelLLVM"}\par
00066 {\cf21 #if defined(_MSC_VER)}\par
00067 {\cf21 # define SIMULATE_ID "MSVC"}\par
00068 {\cf21 #endif}\par
00069 {\cf21 #if defined(__GNUC__)}\par
00070 {\cf21 # define SIMULATE_ID "GNU"}\par
00071 {\cf21 #endif}\par
00072 {\cf20 /* __INTEL_LLVM_COMPILER = VVVVRP prior to 2021.2.0, VVVVRRPP for 2021.2.0 and}\par
00073 {\cf20  * later.  Look for 6 digit vs. 8 digit version number to decide encoding.}\par
00074 {\cf20  * VVVV is no smaller than the current year when a version is released.}\par
00075 {\cf20  */}\par
00076 {\cf21 #if __INTEL_LLVM_COMPILER < 1000000L}\par
00077 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/100)}\par
00078 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/10 % 10)}\par
00079 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER    % 10)}\par
00080 {\cf21 #else}\par
00081 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__INTEL_LLVM_COMPILER/10000)}\par
00082 {\cf21 # define COMPILER_VERSION_MINOR DEC(__INTEL_LLVM_COMPILER/100 % 100)}\par
00083 {\cf21 # define COMPILER_VERSION_PATCH DEC(__INTEL_LLVM_COMPILER     % 100)}\par
00084 {\cf21 #endif}\par
00085 {\cf21 #if defined(_MSC_VER)}\par
00086   {\cf20 /* _MSC_VER = VVRR */}\par
00087 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00088 {\cf21 # define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00089 {\cf21 #endif}\par
00090 {\cf21 #if defined(__GNUC__)}\par
00091 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00092 {\cf21 #elif defined(__GNUG__)}\par
00093 {\cf21 # define SIMULATE_VERSION_MAJOR DEC(__GNUG__)}\par
00094 {\cf21 #endif}\par
00095 {\cf21 #if defined(__GNUC_MINOR__)}\par
00096 {\cf21 # define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00097 {\cf21 #endif}\par
00098 {\cf21 #if defined(__GNUC_PATCHLEVEL__)}\par
00099 {\cf21 # define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00100 {\cf21 #endif}\par
00101 \par
00102 {\cf21 #elif defined(__PATHCC__)}\par
00103 {\cf21 # define COMPILER_ID "PathScale"}\par
00104 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PATHCC__)}\par
00105 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)}\par
00106 {\cf21 # if defined(__PATHCC_PATCHLEVEL__)}\par
00107 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)}\par
00108 {\cf21 # endif}\par
00109 \par
00110 {\cf21 #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)}\par
00111 {\cf21 # define COMPILER_ID "Embarcadero"}\par
00112 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)}\par
00113 {\cf21 # define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)}\par
00114 {\cf21 # define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)}\par
00115 \par
00116 {\cf21 #elif defined(__BORLANDC__)}\par
00117 {\cf21 # define COMPILER_ID "Borland"}\par
00118   {\cf20 /* __BORLANDC__ = 0xVRR */}\par
00119 {\cf21 # define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)}\par
00120 {\cf21 # define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)}\par
00121 \par
00122 {\cf21 #elif defined(__WATCOMC__) && __WATCOMC__ < 1200}\par
00123 {\cf21 # define COMPILER_ID "Watcom"}\par
00124    {\cf20 /* __WATCOMC__ = VVRR */}\par
00125 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)}\par
00126 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00127 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00128 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00129 {\cf21 # endif}\par
00130 \par
00131 {\cf21 #elif defined(__WATCOMC__)}\par
00132 {\cf21 # define COMPILER_ID "OpenWatcom"}\par
00133    {\cf20 /* __WATCOMC__ = VVRP + 1100 */}\par
00134 {\cf21 # define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)}\par
00135 {\cf21 # define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)}\par
00136 {\cf21 # if (__WATCOMC__ % 10) > 0}\par
00137 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)}\par
00138 {\cf21 # endif}\par
00139 \par
00140 {\cf21 #elif defined(__SUNPRO_CC)}\par
00141 {\cf21 # define COMPILER_ID "SunPro"}\par
00142 {\cf21 # if __SUNPRO_CC >= 0x5100}\par
00143    {\cf20 /* __SUNPRO_CC = 0xVRRP */}\par
00144 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>12)}\par
00145 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xFF)}\par
00146 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00147 {\cf21 # else}\par
00148    {\cf20 /* __SUNPRO_CC = 0xVRP */}\par
00149 {\cf21 #  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_CC>>8)}\par
00150 {\cf21 #  define COMPILER_VERSION_MINOR HEX(__SUNPRO_CC>>4 & 0xF)}\par
00151 {\cf21 #  define COMPILER_VERSION_PATCH HEX(__SUNPRO_CC    & 0xF)}\par
00152 {\cf21 # endif}\par
00153 \par
00154 {\cf21 #elif defined(__HP_aCC)}\par
00155 {\cf21 # define COMPILER_ID "HP"}\par
00156   {\cf20 /* __HP_aCC = VVRRPP */}\par
00157 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__HP_aCC/10000)}\par
00158 {\cf21 # define COMPILER_VERSION_MINOR DEC(__HP_aCC/100 % 100)}\par
00159 {\cf21 # define COMPILER_VERSION_PATCH DEC(__HP_aCC     % 100)}\par
00160 \par
00161 {\cf21 #elif defined(__DECCXX)}\par
00162 {\cf21 # define COMPILER_ID "Compaq"}\par
00163   {\cf20 /* __DECCXX_VER = VVRRTPPPP */}\par
00164 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__DECCXX_VER/10000000)}\par
00165 {\cf21 # define COMPILER_VERSION_MINOR DEC(__DECCXX_VER/100000  % 100)}\par
00166 {\cf21 # define COMPILER_VERSION_PATCH DEC(__DECCXX_VER         % 10000)}\par
00167 \par
00168 {\cf21 #elif defined(__IBMCPP__) && defined(__COMPILER_VER__)}\par
00169 {\cf21 # define COMPILER_ID "zOS"}\par
00170   {\cf20 /* __IBMCPP__ = VRP */}\par
00171 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00172 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00173 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00174 \par
00175 {\cf21 #elif defined(__open_xl__) && defined(__clang__)}\par
00176 {\cf21 # define COMPILER_ID "IBMClang"}\par
00177 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__open_xl_version__)}\par
00178 {\cf21 # define COMPILER_VERSION_MINOR DEC(__open_xl_release__)}\par
00179 {\cf21 # define COMPILER_VERSION_PATCH DEC(__open_xl_modification__)}\par
00180 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__open_xl_ptf_fix_level__)}\par
00181 \par
00182 \par
00183 {\cf21 #elif defined(__ibmxl__) && defined(__clang__)}\par
00184 {\cf21 # define COMPILER_ID "XLClang"}\par
00185 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)}\par
00186 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)}\par
00187 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)}\par
00188 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)}\par
00189 \par
00190 \par
00191 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ >= 800}\par
00192 {\cf21 # define COMPILER_ID "XL"}\par
00193   {\cf20 /* __IBMCPP__ = VRP */}\par
00194 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00195 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00196 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00197 \par
00198 {\cf21 #elif defined(__IBMCPP__) && !defined(__COMPILER_VER__) && __IBMCPP__ < 800}\par
00199 {\cf21 # define COMPILER_ID "VisualAge"}\par
00200   {\cf20 /* __IBMCPP__ = VRP */}\par
00201 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__IBMCPP__/100)}\par
00202 {\cf21 # define COMPILER_VERSION_MINOR DEC(__IBMCPP__/10 % 10)}\par
00203 {\cf21 # define COMPILER_VERSION_PATCH DEC(__IBMCPP__    % 10)}\par
00204 \par
00205 {\cf21 #elif defined(__NVCOMPILER)}\par
00206 {\cf21 # define COMPILER_ID "NVHPC"}\par
00207 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__NVCOMPILER_MAJOR__)}\par
00208 {\cf21 # define COMPILER_VERSION_MINOR DEC(__NVCOMPILER_MINOR__)}\par
00209 {\cf21 # if defined(__NVCOMPILER_PATCHLEVEL__)}\par
00210 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__NVCOMPILER_PATCHLEVEL__)}\par
00211 {\cf21 # endif}\par
00212 \par
00213 {\cf21 #elif defined(__PGI)}\par
00214 {\cf21 # define COMPILER_ID "PGI"}\par
00215 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__PGIC__)}\par
00216 {\cf21 # define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)}\par
00217 {\cf21 # if defined(__PGIC_PATCHLEVEL__)}\par
00218 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)}\par
00219 {\cf21 # endif}\par
00220 \par
00221 {\cf21 #elif defined(__clang__) && defined(__cray__)}\par
00222 {\cf21 # define COMPILER_ID "CrayClang"}\par
00223 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__cray_major__)}\par
00224 {\cf21 # define COMPILER_VERSION_MINOR DEC(__cray_minor__)}\par
00225 {\cf21 # define COMPILER_VERSION_PATCH DEC(__cray_patchlevel__)}\par
00226 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00227 \par
00228 \par
00229 {\cf21 #elif defined(_CRAYC)}\par
00230 {\cf21 # define COMPILER_ID "Cray"}\par
00231 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)}\par
00232 {\cf21 # define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)}\par
00233 \par
00234 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00235 {\cf21 # define COMPILER_ID "TI"}\par
00236   {\cf20 /* __TI_COMPILER_VERSION__ = VVVRRRPPP */}\par
00237 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)}\par
00238 {\cf21 # define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)}\par
00239 {\cf21 # define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)}\par
00240 \par
00241 {\cf21 #elif defined(__CLANG_FUJITSU)}\par
00242 {\cf21 # define COMPILER_ID "FujitsuClang"}\par
00243 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00244 {\cf21 # define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00245 {\cf21 # define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00246 {\cf21 # define COMPILER_VERSION_INTERNAL_STR __clang_version__}\par
00247 \par
00248 \par
00249 {\cf21 #elif defined(__FUJITSU)}\par
00250 {\cf21 # define COMPILER_ID "Fujitsu"}\par
00251 {\cf21 # if defined(__FCC_version__)}\par
00252 {\cf21 #   define COMPILER_VERSION __FCC_version__}\par
00253 {\cf21 # elif defined(__FCC_major__)}\par
00254 {\cf21 #   define COMPILER_VERSION_MAJOR DEC(__FCC_major__)}\par
00255 {\cf21 #   define COMPILER_VERSION_MINOR DEC(__FCC_minor__)}\par
00256 {\cf21 #   define COMPILER_VERSION_PATCH DEC(__FCC_patchlevel__)}\par
00257 {\cf21 # endif}\par
00258 {\cf21 # if defined(__fcc_version)}\par
00259 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__fcc_version)}\par
00260 {\cf21 # elif defined(__FCC_VERSION)}\par
00261 {\cf21 #   define COMPILER_VERSION_INTERNAL DEC(__FCC_VERSION)}\par
00262 {\cf21 # endif}\par
00263 \par
00264 \par
00265 {\cf21 #elif defined(__ghs__)}\par
00266 {\cf21 # define COMPILER_ID "GHS"}\par
00267 {\cf20 /* __GHS_VERSION_NUMBER = VVVVRP */}\par
00268 {\cf21 # ifdef __GHS_VERSION_NUMBER}\par
00269 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)}\par
00270 {\cf21 # define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)}\par
00271 {\cf21 # define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)}\par
00272 {\cf21 # endif}\par
00273 \par
00274 {\cf21 #elif defined(__TASKING__)}\par
00275 {\cf21 # define COMPILER_ID "Tasking"}\par
00276 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__VERSION__/1000)}\par
00277 {\cf21   # define COMPILER_VERSION_MINOR DEC(__VERSION__ % 100)}\par
00278 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__VERSION__)}\par
00279 \par
00280 {\cf21 #elif defined(__ORANGEC__)}\par
00281 {\cf21 # define COMPILER_ID "OrangeC"}\par
00282 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__ORANGEC_MAJOR__)}\par
00283 {\cf21 # define COMPILER_VERSION_MINOR DEC(__ORANGEC_MINOR__)}\par
00284 {\cf21 # define COMPILER_VERSION_PATCH DEC(__ORANGEC_PATCHLEVEL__)}\par
00285 \par
00286 {\cf21 #elif defined(__SCO_VERSION__)}\par
00287 {\cf21 # define COMPILER_ID "SCO"}\par
00288 \par
00289 {\cf21 #elif defined(__ARMCC_VERSION) && !defined(__clang__)}\par
00290 {\cf21 # define COMPILER_ID "ARMCC"}\par
00291 {\cf21 #if __ARMCC_VERSION >= 1000000}\par
00292   {\cf20 /* __ARMCC_VERSION = VRRPPPP */}\par
00293 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)}\par
00294 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)}\par
00295 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)}\par
00296 {\cf21 #else}\par
00297   {\cf20 /* __ARMCC_VERSION = VRPPPP */}\par
00298 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)}\par
00299 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)}\par
00300 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)}\par
00301 {\cf21 #endif}\par
00302 \par
00303 \par
00304 {\cf21 #elif defined(__clang__) && defined(__apple_build_version__)}\par
00305 {\cf21 # define COMPILER_ID "AppleClang"}\par
00306 {\cf21 # if defined(_MSC_VER)}\par
00307 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00308 {\cf21 # endif}\par
00309 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00310 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00311 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00312 {\cf21 # if defined(_MSC_VER)}\par
00313    {\cf20 /* _MSC_VER = VVRR */}\par
00314 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00315 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00316 {\cf21 # endif}\par
00317 {\cf21 # define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)}\par
00318 \par
00319 {\cf21 #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)}\par
00320 {\cf21 # define COMPILER_ID "ARMClang"}\par
00321 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)}\par
00322 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)}\par
00323 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION/100   % 100)}\par
00324 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)}\par
00325 \par
00326 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00327 {\cf21 # define COMPILER_ID "TIClang"}\par
00328 {\cf21   # define COMPILER_VERSION_MAJOR DEC(__ti_major__)}\par
00329 {\cf21   # define COMPILER_VERSION_MINOR DEC(__ti_minor__)}\par
00330 {\cf21   # define COMPILER_VERSION_PATCH DEC(__ti_patchlevel__)}\par
00331 {\cf21 # define COMPILER_VERSION_INTERNAL DEC(__ti_version__)}\par
00332 \par
00333 {\cf21 #elif defined(__clang__)}\par
00334 {\cf21 # define COMPILER_ID "Clang"}\par
00335 {\cf21 # if defined(_MSC_VER)}\par
00336 {\cf21 #  define SIMULATE_ID "MSVC"}\par
00337 {\cf21 # endif}\par
00338 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__clang_major__)}\par
00339 {\cf21 # define COMPILER_VERSION_MINOR DEC(__clang_minor__)}\par
00340 {\cf21 # define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)}\par
00341 {\cf21 # if defined(_MSC_VER)}\par
00342    {\cf20 /* _MSC_VER = VVRR */}\par
00343 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00344 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00345 {\cf21 # endif}\par
00346 \par
00347 {\cf21 #elif defined(__LCC__) && (defined(__GNUC__) || defined(__GNUG__) || defined(__MCST__))}\par
00348 {\cf21 # define COMPILER_ID "LCC"}\par
00349 {\cf21 # define COMPILER_VERSION_MAJOR DEC(__LCC__ / 100)}\par
00350 {\cf21 # define COMPILER_VERSION_MINOR DEC(__LCC__ % 100)}\par
00351 {\cf21 # if defined(__LCC_MINOR__)}\par
00352 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__LCC_MINOR__)}\par
00353 {\cf21 # endif}\par
00354 {\cf21 # if defined(__GNUC__) && defined(__GNUC_MINOR__)}\par
00355 {\cf21 #  define SIMULATE_ID "GNU"}\par
00356 {\cf21 #  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)}\par
00357 {\cf21 #  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00358 {\cf21 #  if defined(__GNUC_PATCHLEVEL__)}\par
00359 {\cf21 #   define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00360 {\cf21 #  endif}\par
00361 {\cf21 # endif}\par
00362 \par
00363 {\cf21 #elif defined(__GNUC__) || defined(__GNUG__)}\par
00364 {\cf21 # define COMPILER_ID "GNU"}\par
00365 {\cf21 # if defined(__GNUC__)}\par
00366 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUC__)}\par
00367 {\cf21 # else}\par
00368 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__GNUG__)}\par
00369 {\cf21 # endif}\par
00370 {\cf21 # if defined(__GNUC_MINOR__)}\par
00371 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)}\par
00372 {\cf21 # endif}\par
00373 {\cf21 # if defined(__GNUC_PATCHLEVEL__)}\par
00374 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)}\par
00375 {\cf21 # endif}\par
00376 \par
00377 {\cf21 #elif defined(_MSC_VER)}\par
00378 {\cf21 # define COMPILER_ID "MSVC"}\par
00379   {\cf20 /* _MSC_VER = VVRR */}\par
00380 {\cf21 # define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)}\par
00381 {\cf21 # define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)}\par
00382 {\cf21 # if defined(_MSC_FULL_VER)}\par
00383 {\cf21 #  if _MSC_VER >= 1400}\par
00384     {\cf20 /* _MSC_FULL_VER = VVRRPPPPP */}\par
00385 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)}\par
00386 {\cf21 #  else}\par
00387     {\cf20 /* _MSC_FULL_VER = VVRRPPPP */}\par
00388 {\cf21 #   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)}\par
00389 {\cf21 #  endif}\par
00390 {\cf21 # endif}\par
00391 {\cf21 # if defined(_MSC_BUILD)}\par
00392 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)}\par
00393 {\cf21 # endif}\par
00394 \par
00395 {\cf21 #elif defined(_ADI_COMPILER)}\par
00396 {\cf21 # define COMPILER_ID "ADSP"}\par
00397 {\cf21 #if defined(__VERSIONNUM__)}\par
00398   {\cf20 /* __VERSIONNUM__ = 0xVVRRPPTT */}\par
00399 {\cf21 #  define COMPILER_VERSION_MAJOR DEC(__VERSIONNUM__ >> 24 & 0xFF)}\par
00400 {\cf21 #  define COMPILER_VERSION_MINOR DEC(__VERSIONNUM__ >> 16 & 0xFF)}\par
00401 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__VERSIONNUM__ >> 8 & 0xFF)}\par
00402 {\cf21 #  define COMPILER_VERSION_TWEAK DEC(__VERSIONNUM__ & 0xFF)}\par
00403 {\cf21 #endif}\par
00404 \par
00405 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00406 {\cf21 # define COMPILER_ID "IAR"}\par
00407 {\cf21 # if defined(__VER__) && defined(__ICCARM__)}\par
00408 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)}\par
00409 {\cf21 #  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)}\par
00410 {\cf21 #  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)}\par
00411 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00412 {\cf21 # elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__) || defined(__ICCSTM8__))}\par
00413 {\cf21 #  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)}\par
00414 {\cf21 #  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))}\par
00415 {\cf21 #  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)}\par
00416 {\cf21 #  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)}\par
00417 {\cf21 # endif}\par
00418 \par
00419 \par
00420 {\cf20 /* These compilers are either not known or too old to define an}\par
00421 {\cf20   identification macro.  Try to identify the platform and guess that}\par
00422 {\cf20   it is the native compiler.  */}\par
00423 {\cf21 #elif defined(__hpux) || defined(__hpua)}\par
00424 {\cf21 # define COMPILER_ID "HP"}\par
00425 \par
00426 {\cf21 #else }{\cf20 /* unknown compiler */}{\cf21 }\par
00427 {\cf21 # define COMPILER_ID ""}\par
00428 {\cf21 #endif}\par
00429 \par
00430 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00431 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00432 {\cf20    because some compilers will just produce instructions to fill the}\par
00433 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00434 {\cf18 char} {\cf17 const}* info_compiler = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler["} COMPILER_ID {\cf22 "]"};\par
00435 {\cf21 #ifdef SIMULATE_ID}\par
00436 {\cf18 char} {\cf17 const}* info_simulate = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "simulate["} SIMULATE_ID {\cf22 "]"};\par
00437 {\cf21 #endif}\par
00438 \par
00439 {\cf21 #ifdef __QNXNTO__}\par
00440 {\cf18 char} {\cf17 const}* qnxnto = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "qnxnto[]"};\par
00441 {\cf21 #endif}\par
00442 \par
00443 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00444 {\cf18 char} {\cf17 const} *info_cray = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_wrapper[CrayPrgEnv]"};\par
00445 {\cf21 #endif}\par
00446 \par
00447 {\cf21 #define STRINGIFY_HELPER(X) #X}\par
00448 {\cf21 #define STRINGIFY(X) STRINGIFY_HELPER(X)}\par
00449 \par
00450 {\cf20 /* Identify known platforms by name.  */}\par
00451 {\cf21 #if defined(__linux) || defined(__linux__) || defined(linux)}\par
00452 {\cf21 # define PLATFORM_ID "Linux"}\par
00453 \par
00454 {\cf21 #elif defined(__MSYS__)}\par
00455 {\cf21 # define PLATFORM_ID "MSYS"}\par
00456 \par
00457 {\cf21 #elif defined(__CYGWIN__)}\par
00458 {\cf21 # define PLATFORM_ID "Cygwin"}\par
00459 \par
00460 {\cf21 #elif defined(__MINGW32__)}\par
00461 {\cf21 # define PLATFORM_ID "MinGW"}\par
00462 \par
00463 {\cf21 #elif defined(__APPLE__)}\par
00464 {\cf21 # define PLATFORM_ID "Darwin"}\par
00465 \par
00466 {\cf21 #elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)}\par
00467 {\cf21 # define PLATFORM_ID "Windows"}\par
00468 \par
00469 {\cf21 #elif defined(__FreeBSD__) || defined(__FreeBSD)}\par
00470 {\cf21 # define PLATFORM_ID "FreeBSD"}\par
00471 \par
00472 {\cf21 #elif defined(__NetBSD__) || defined(__NetBSD)}\par
00473 {\cf21 # define PLATFORM_ID "NetBSD"}\par
00474 \par
00475 {\cf21 #elif defined(__OpenBSD__) || defined(__OPENBSD)}\par
00476 {\cf21 # define PLATFORM_ID "OpenBSD"}\par
00477 \par
00478 {\cf21 #elif defined(__sun) || defined(sun)}\par
00479 {\cf21 # define PLATFORM_ID "SunOS"}\par
00480 \par
00481 {\cf21 #elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)}\par
00482 {\cf21 # define PLATFORM_ID "AIX"}\par
00483 \par
00484 {\cf21 #elif defined(__hpux) || defined(__hpux__)}\par
00485 {\cf21 # define PLATFORM_ID "HP-UX"}\par
00486 \par
00487 {\cf21 #elif defined(__HAIKU__)}\par
00488 {\cf21 # define PLATFORM_ID "Haiku"}\par
00489 \par
00490 {\cf21 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)}\par
00491 {\cf21 # define PLATFORM_ID "BeOS"}\par
00492 \par
00493 {\cf21 #elif defined(__QNX__) || defined(__QNXNTO__)}\par
00494 {\cf21 # define PLATFORM_ID "QNX"}\par
00495 \par
00496 {\cf21 #elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)}\par
00497 {\cf21 # define PLATFORM_ID "Tru64"}\par
00498 \par
00499 {\cf21 #elif defined(__riscos) || defined(__riscos__)}\par
00500 {\cf21 # define PLATFORM_ID "RISCos"}\par
00501 \par
00502 {\cf21 #elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)}\par
00503 {\cf21 # define PLATFORM_ID "SINIX"}\par
00504 \par
00505 {\cf21 #elif defined(__UNIX_SV__)}\par
00506 {\cf21 # define PLATFORM_ID "UNIX_SV"}\par
00507 \par
00508 {\cf21 #elif defined(__bsdos__)}\par
00509 {\cf21 # define PLATFORM_ID "BSDOS"}\par
00510 \par
00511 {\cf21 #elif defined(_MPRAS) || defined(MPRAS)}\par
00512 {\cf21 # define PLATFORM_ID "MP-RAS"}\par
00513 \par
00514 {\cf21 #elif defined(__osf) || defined(__osf__)}\par
00515 {\cf21 # define PLATFORM_ID "OSF1"}\par
00516 \par
00517 {\cf21 #elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)}\par
00518 {\cf21 # define PLATFORM_ID "SCO_SV"}\par
00519 \par
00520 {\cf21 #elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)}\par
00521 {\cf21 # define PLATFORM_ID "ULTRIX"}\par
00522 \par
00523 {\cf21 #elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)}\par
00524 {\cf21 # define PLATFORM_ID "Xenix"}\par
00525 \par
00526 {\cf21 #elif defined(__WATCOMC__)}\par
00527 {\cf21 # if defined(__LINUX__)}\par
00528 {\cf21 #  define PLATFORM_ID "Linux"}\par
00529 \par
00530 {\cf21 # elif defined(__DOS__)}\par
00531 {\cf21 #  define PLATFORM_ID "DOS"}\par
00532 \par
00533 {\cf21 # elif defined(__OS2__)}\par
00534 {\cf21 #  define PLATFORM_ID "OS2"}\par
00535 \par
00536 {\cf21 # elif defined(__WINDOWS__)}\par
00537 {\cf21 #  define PLATFORM_ID "Windows3x"}\par
00538 \par
00539 {\cf21 # elif defined(__VXWORKS__)}\par
00540 {\cf21 #  define PLATFORM_ID "VxWorks"}\par
00541 \par
00542 {\cf21 # else }{\cf20 /* unknown platform */}{\cf21 }\par
00543 {\cf21 #  define PLATFORM_ID}\par
00544 {\cf21 # endif}\par
00545 \par
00546 {\cf21 #elif defined(__INTEGRITY)}\par
00547 {\cf21 # if defined(INT_178B)}\par
00548 {\cf21 #  define PLATFORM_ID "Integrity178"}\par
00549 \par
00550 {\cf21 # else }{\cf20 /* regular Integrity */}{\cf21 }\par
00551 {\cf21 #  define PLATFORM_ID "Integrity"}\par
00552 {\cf21 # endif}\par
00553 \par
00554 {\cf21 # elif defined(_ADI_COMPILER)}\par
00555 {\cf21 #  define PLATFORM_ID "ADSP"}\par
00556 \par
00557 {\cf21 #else }{\cf20 /* unknown platform */}{\cf21 }\par
00558 {\cf21 # define PLATFORM_ID}\par
00559 \par
00560 {\cf21 #endif}\par
00561 \par
00562 {\cf20 /* For windows compilers MSVC and Intel we can determine}\par
00563 {\cf20    the architecture of the compiler being used.  This is because}\par
00564 {\cf20    the compilers do not have flags that can change the architecture,}\par
00565 {\cf20    but rather depend on which compiler is being used}\par
00566 {\cf20 */}\par
00567 {\cf21 #if defined(_WIN32) && defined(_MSC_VER)}\par
00568 {\cf21 # if defined(_M_IA64)}\par
00569 {\cf21 #  define ARCHITECTURE_ID "IA64"}\par
00570 \par
00571 {\cf21 # elif defined(_M_ARM64EC)}\par
00572 {\cf21 #  define ARCHITECTURE_ID "ARM64EC"}\par
00573 \par
00574 {\cf21 # elif defined(_M_X64) || defined(_M_AMD64)}\par
00575 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00576 \par
00577 {\cf21 # elif defined(_M_IX86)}\par
00578 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00579 \par
00580 {\cf21 # elif defined(_M_ARM64)}\par
00581 {\cf21 #  define ARCHITECTURE_ID "ARM64"}\par
00582 \par
00583 {\cf21 # elif defined(_M_ARM)}\par
00584 {\cf21 #  if _M_ARM == 4}\par
00585 {\cf21 #   define ARCHITECTURE_ID "ARMV4I"}\par
00586 {\cf21 #  elif _M_ARM == 5}\par
00587 {\cf21 #   define ARCHITECTURE_ID "ARMV5I"}\par
00588 {\cf21 #  else}\par
00589 {\cf21 #   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)}\par
00590 {\cf21 #  endif}\par
00591 \par
00592 {\cf21 # elif defined(_M_MIPS)}\par
00593 {\cf21 #  define ARCHITECTURE_ID "MIPS"}\par
00594 \par
00595 {\cf21 # elif defined(_M_SH)}\par
00596 {\cf21 #  define ARCHITECTURE_ID "SHx"}\par
00597 \par
00598 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00599 {\cf21 #  define ARCHITECTURE_ID ""}\par
00600 {\cf21 # endif}\par
00601 \par
00602 {\cf21 #elif defined(__WATCOMC__)}\par
00603 {\cf21 # if defined(_M_I86)}\par
00604 {\cf21 #  define ARCHITECTURE_ID "I86"}\par
00605 \par
00606 {\cf21 # elif defined(_M_IX86)}\par
00607 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00608 \par
00609 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00610 {\cf21 #  define ARCHITECTURE_ID ""}\par
00611 {\cf21 # endif}\par
00612 \par
00613 {\cf21 #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)}\par
00614 {\cf21 # if defined(__ICCARM__)}\par
00615 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00616 \par
00617 {\cf21 # elif defined(__ICCRX__)}\par
00618 {\cf21 #  define ARCHITECTURE_ID "RX"}\par
00619 \par
00620 {\cf21 # elif defined(__ICCRH850__)}\par
00621 {\cf21 #  define ARCHITECTURE_ID "RH850"}\par
00622 \par
00623 {\cf21 # elif defined(__ICCRL78__)}\par
00624 {\cf21 #  define ARCHITECTURE_ID "RL78"}\par
00625 \par
00626 {\cf21 # elif defined(__ICCRISCV__)}\par
00627 {\cf21 #  define ARCHITECTURE_ID "RISCV"}\par
00628 \par
00629 {\cf21 # elif defined(__ICCAVR__)}\par
00630 {\cf21 #  define ARCHITECTURE_ID "AVR"}\par
00631 \par
00632 {\cf21 # elif defined(__ICC430__)}\par
00633 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00634 \par
00635 {\cf21 # elif defined(__ICCV850__)}\par
00636 {\cf21 #  define ARCHITECTURE_ID "V850"}\par
00637 \par
00638 {\cf21 # elif defined(__ICC8051__)}\par
00639 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00640 \par
00641 {\cf21 # elif defined(__ICCSTM8__)}\par
00642 {\cf21 #  define ARCHITECTURE_ID "STM8"}\par
00643 \par
00644 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00645 {\cf21 #  define ARCHITECTURE_ID ""}\par
00646 {\cf21 # endif}\par
00647 \par
00648 {\cf21 #elif defined(__ghs__)}\par
00649 {\cf21 # if defined(__PPC64__)}\par
00650 {\cf21 #  define ARCHITECTURE_ID "PPC64"}\par
00651 \par
00652 {\cf21 # elif defined(__ppc__)}\par
00653 {\cf21 #  define ARCHITECTURE_ID "PPC"}\par
00654 \par
00655 {\cf21 # elif defined(__ARM__)}\par
00656 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00657 \par
00658 {\cf21 # elif defined(__x86_64__)}\par
00659 {\cf21 #  define ARCHITECTURE_ID "x64"}\par
00660 \par
00661 {\cf21 # elif defined(__i386__)}\par
00662 {\cf21 #  define ARCHITECTURE_ID "X86"}\par
00663 \par
00664 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00665 {\cf21 #  define ARCHITECTURE_ID ""}\par
00666 {\cf21 # endif}\par
00667 \par
00668 {\cf21 #elif defined(__clang__) && defined(__ti__)}\par
00669 {\cf21 # if defined(__ARM_ARCH)}\par
00670 {\cf21 #  define ARCHITECTURE_ID "Arm"}\par
00671 \par
00672 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00673 {\cf21 #  define ARCHITECTURE_ID ""}\par
00674 {\cf21 # endif}\par
00675 \par
00676 {\cf21 #elif defined(__TI_COMPILER_VERSION__)}\par
00677 {\cf21 # if defined(__TI_ARM__)}\par
00678 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00679 \par
00680 {\cf21 # elif defined(__MSP430__)}\par
00681 {\cf21 #  define ARCHITECTURE_ID "MSP430"}\par
00682 \par
00683 {\cf21 # elif defined(__TMS320C28XX__)}\par
00684 {\cf21 #  define ARCHITECTURE_ID "TMS320C28x"}\par
00685 \par
00686 {\cf21 # elif defined(__TMS320C6X__) || defined(_TMS320C6X)}\par
00687 {\cf21 #  define ARCHITECTURE_ID "TMS320C6x"}\par
00688 \par
00689 {\cf21 # else }{\cf20 /* unknown architecture */}{\cf21 }\par
00690 {\cf21 #  define ARCHITECTURE_ID ""}\par
00691 {\cf21 # endif}\par
00692 \par
00693 {\cf21 # elif defined(__ADSPSHARC__)}\par
00694 {\cf21 #  define ARCHITECTURE_ID "SHARC"}\par
00695 \par
00696 {\cf21 # elif defined(__ADSPBLACKFIN__)}\par
00697 {\cf21 #  define ARCHITECTURE_ID "Blackfin"}\par
00698 \par
00699 {\cf21 #elif defined(__TASKING__)}\par
00700 \par
00701 {\cf21 # if defined(__CTC__) || defined(__CPTC__)}\par
00702 {\cf21 #  define ARCHITECTURE_ID "TriCore"}\par
00703 \par
00704 {\cf21 # elif defined(__CMCS__)}\par
00705 {\cf21 #  define ARCHITECTURE_ID "MCS"}\par
00706 \par
00707 {\cf21 # elif defined(__CARM__)}\par
00708 {\cf21 #  define ARCHITECTURE_ID "ARM"}\par
00709 \par
00710 {\cf21 # elif defined(__CARC__)}\par
00711 {\cf21 #  define ARCHITECTURE_ID "ARC"}\par
00712 \par
00713 {\cf21 # elif defined(__C51__)}\par
00714 {\cf21 #  define ARCHITECTURE_ID "8051"}\par
00715 \par
00716 {\cf21 # elif defined(__CPCP__)}\par
00717 {\cf21 #  define ARCHITECTURE_ID "PCP"}\par
00718 \par
00719 {\cf21 # else}\par
00720 {\cf21 #  define ARCHITECTURE_ID ""}\par
00721 {\cf21 # endif}\par
00722 \par
00723 {\cf21 #else}\par
00724 {\cf21 #  define ARCHITECTURE_ID}\par
00725 {\cf21 #endif}\par
00726 \par
00727 {\cf20 /* Convert integer to decimal digit literals.  */}\par
00728 {\cf21 #define DEC(n)                   \\}\par
00729 {\cf21   ('0' + (((n) / 10000000)%10)), \\}\par
00730 {\cf21   ('0' + (((n) / 1000000)%10)),  \\}\par
00731 {\cf21   ('0' + (((n) / 100000)%10)),   \\}\par
00732 {\cf21   ('0' + (((n) / 10000)%10)),    \\}\par
00733 {\cf21   ('0' + (((n) / 1000)%10)),     \\}\par
00734 {\cf21   ('0' + (((n) / 100)%10)),      \\}\par
00735 {\cf21   ('0' + (((n) / 10)%10)),       \\}\par
00736 {\cf21   ('0' +  ((n) % 10))}\par
00737 \par
00738 {\cf20 /* Convert integer to hex digit literals.  */}\par
00739 {\cf21 #define HEX(n)             \\}\par
00740 {\cf21   ('0' + ((n)>>28 & 0xF)), \\}\par
00741 {\cf21   ('0' + ((n)>>24 & 0xF)), \\}\par
00742 {\cf21   ('0' + ((n)>>20 & 0xF)), \\}\par
00743 {\cf21   ('0' + ((n)>>16 & 0xF)), \\}\par
00744 {\cf21   ('0' + ((n)>>12 & 0xF)), \\}\par
00745 {\cf21   ('0' + ((n)>>8  & 0xF)), \\}\par
00746 {\cf21   ('0' + ((n)>>4  & 0xF)), \\}\par
00747 {\cf21   ('0' + ((n)     & 0xF))}\par
00748 \par
00749 {\cf20 /* Construct a string literal encoding the version number. */}\par
00750 {\cf21 #ifdef COMPILER_VERSION}\par
00751 {\cf18 char} {\cf17 const}* info_version = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version["} COMPILER_VERSION {\cf22 "]"};\par
00752 \par
00753 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00754 {\cf21 #elif defined(COMPILER_VERSION_MAJOR)}\par
00755 {\cf18 char} {\cf17 const} info_version[] = \{\par
00756   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00757   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00758   COMPILER_VERSION_MAJOR,\par
00759 {\cf21 # ifdef COMPILER_VERSION_MINOR}\par
00760   {\cf23 '.'}, COMPILER_VERSION_MINOR,\par
00761 {\cf21 #  ifdef COMPILER_VERSION_PATCH}\par
00762    {\cf23 '.'}, COMPILER_VERSION_PATCH,\par
00763 {\cf21 #   ifdef COMPILER_VERSION_TWEAK}\par
00764     {\cf23 '.'}, COMPILER_VERSION_TWEAK,\par
00765 {\cf21 #   endif}\par
00766 {\cf21 #  endif}\par
00767 {\cf21 # endif}\par
00768   {\cf23 ']'},{\cf23 '\\0'}\};\par
00769 {\cf21 #endif}\par
00770 \par
00771 {\cf20 /* Construct a string literal encoding the internal version number. */}\par
00772 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00773 {\cf18 char} {\cf17 const} info_version_internal[] = \{\par
00774   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00775   {\cf23 'c'},{\cf23 'o'},{\cf23 'm'},{\cf23 'p'},{\cf23 'i'},{\cf23 'l'},{\cf23 'e'},{\cf23 'r'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '_'},\par
00776   {\cf23 'i'},{\cf23 'n'},{\cf23 't'},{\cf23 'e'},{\cf23 'r'},{\cf23 'n'},{\cf23 'a'},{\cf23 'l'},{\cf23 '['},\par
00777   COMPILER_VERSION_INTERNAL,{\cf23 ']'},{\cf23 '\\0'}\};\par
00778 {\cf21 #elif defined(COMPILER_VERSION_INTERNAL_STR)}\par
00779 {\cf18 char} {\cf17 const}* info_version_internal = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "compiler_version_internal["} COMPILER_VERSION_INTERNAL_STR {\cf22 "]"};\par
00780 {\cf21 #endif}\par
00781 \par
00782 {\cf20 /* Construct a string literal encoding the version number components. */}\par
00783 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00784 {\cf18 char} {\cf17 const} info_simulate_version[] = \{\par
00785   {\cf23 'I'}, {\cf23 'N'}, {\cf23 'F'}, {\cf23 'O'}, {\cf23 ':'},\par
00786   {\cf23 's'},{\cf23 'i'},{\cf23 'm'},{\cf23 'u'},{\cf23 'l'},{\cf23 'a'},{\cf23 't'},{\cf23 'e'},{\cf23 '_'},{\cf23 'v'},{\cf23 'e'},{\cf23 'r'},{\cf23 's'},{\cf23 'i'},{\cf23 'o'},{\cf23 'n'},{\cf23 '['},\par
00787   SIMULATE_VERSION_MAJOR,\par
00788 {\cf21 # ifdef SIMULATE_VERSION_MINOR}\par
00789   {\cf23 '.'}, SIMULATE_VERSION_MINOR,\par
00790 {\cf21 #  ifdef SIMULATE_VERSION_PATCH}\par
00791    {\cf23 '.'}, SIMULATE_VERSION_PATCH,\par
00792 {\cf21 #   ifdef SIMULATE_VERSION_TWEAK}\par
00793     {\cf23 '.'}, SIMULATE_VERSION_TWEAK,\par
00794 {\cf21 #   endif}\par
00795 {\cf21 #  endif}\par
00796 {\cf21 # endif}\par
00797   {\cf23 ']'},{\cf23 '\\0'}\};\par
00798 {\cf21 #endif}\par
00799 \par
00800 {\cf20 /* Construct the string literal in pieces to prevent the source from}\par
00801 {\cf20    getting matched.  Store it in a pointer rather than an array}\par
00802 {\cf20    because some compilers will just produce instructions to fill the}\par
00803 {\cf20    array rather than assigning a pointer to a static array.  */}\par
00804 {\cf18 char} {\cf17 const}* info_platform = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "platform["} PLATFORM_ID {\cf22 "]"};\par
00805 {\cf18 char} {\cf17 const}* info_arch = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "arch["} ARCHITECTURE_ID {\cf22 "]"};\par
00806 \par
00807 \par
00808 \par
00809 {\cf21 #if defined(__INTEL_COMPILER) && defined(_MSVC_LANG) && _MSVC_LANG < 201403L}\par
00810 {\cf21 #  if defined(__INTEL_CXX11_MODE__)}\par
00811 {\cf21 #    if defined(__cpp_aggregate_nsdmi)}\par
00812 {\cf21 #      define CXX_STD 201402L}\par
00813 {\cf21 #    else}\par
00814 {\cf21 #      define CXX_STD 201103L}\par
00815 {\cf21 #    endif}\par
00816 {\cf21 #  else}\par
00817 {\cf21 #    define CXX_STD 199711L}\par
00818 {\cf21 #  endif}\par
00819 {\cf21 #elif defined(_MSC_VER) && defined(_MSVC_LANG)}\par
00820 {\cf21 #  define CXX_STD _MSVC_LANG}\par
00821 {\cf21 #else}\par
00822 {\cf21 #  define CXX_STD __cplusplus}\par
00823 {\cf21 #endif}\par
00824 \par
00825 {\cf17 const} {\cf18 char}* info_language_standard_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "standard_default["}\par
00826 {\cf21 #if CXX_STD > 202002L}\par
00827   {\cf22 "23"}\par
00828 {\cf21 #elif CXX_STD > 201703L}\par
00829   {\cf22 "20"}\par
00830 {\cf21 #elif CXX_STD >= 201703L}\par
00831   {\cf22 "17"}\par
00832 {\cf21 #elif CXX_STD >= 201402L}\par
00833   {\cf22 "14"}\par
00834 {\cf21 #elif CXX_STD >= 201103L}\par
00835   {\cf22 "11"}\par
00836 {\cf21 #else}\par
00837   {\cf22 "98"}\par
00838 {\cf21 #endif}\par
00839 {\cf22 "]"};\par
00840 \par
00841 {\cf17 const} {\cf18 char}* info_language_extensions_default = {\cf22 "INFO"} {\cf22 ":"} {\cf22 "extensions_default["}\par
00842 {\cf21 #if (defined(__clang__) || defined(__GNUC__) || defined(__xlC__) ||           \\}\par
00843 {\cf21      defined(__TI_COMPILER_VERSION__)) &&                                     \\}\par
00844 {\cf21   !defined(__STRICT_ANSI__)}\par
00845   {\cf22 "ON"}\par
00846 {\cf21 #else}\par
00847   {\cf22 "OFF"}\par
00848 {\cf21 #endif}\par
00849 {\cf22 "]"};\par
00850 \par
00851 {\cf20 /*--------------------------------------------------------------------------*/}\par
00852 \par
00853 {\cf18 int} main({\cf18 int} argc, {\cf18 char}* argv[])\par
00854 \{\par
00855   {\cf18 int} require = 0;\par
00856   require += info_compiler[argc];\par
00857   require += info_platform[argc];\par
00858   require += info_arch[argc];\par
00859 {\cf21 #ifdef COMPILER_VERSION_MAJOR}\par
00860   require += info_version[argc];\par
00861 {\cf21 #endif}\par
00862 {\cf21 #ifdef COMPILER_VERSION_INTERNAL}\par
00863   require += info_version_internal[argc];\par
00864 {\cf21 #endif}\par
00865 {\cf21 #ifdef SIMULATE_ID}\par
00866   require += info_simulate[argc];\par
00867 {\cf21 #endif}\par
00868 {\cf21 #ifdef SIMULATE_VERSION_MAJOR}\par
00869   require += info_simulate_version[argc];\par
00870 {\cf21 #endif}\par
00871 {\cf21 #if defined(__CRAYXT_COMPUTE_LINUX_TARGET)}\par
00872   require += info_cray[argc];\par
00873 {\cf21 #endif}\par
00874   require += info_language_standard_default[argc];\par
00875   require += info_language_extensions_default[argc];\par
00876   (void)argv;\par
00877   {\cf19 return} require;\par
00878 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
beam_pinn_documentation.md File Reference\par \pard\plain 
{\tc\tcl2 \v beam_pinn_documentation.md}
{\xe \v beam_pinn_documentation.md}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <torch/torch.h>}\par
{\f2 #include "Global.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Beam::PINN}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
A Physics-Informed Neural Network ({\b PINN}) model for 1D Euler-Bernoulli beam deflection. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Beam::Losses}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Struct to hold different loss components. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Beam}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b Beam::generate_training_data} (const int n_points=100)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Generates random 1D training points in the interval [0, 1]. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b Beam::boundary_loss} ({\b PINN} &model)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the boundary condition loss for the beam. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b Beam::physics_loss} ({\b PINN} &model, torch::Tensor input, float EI=1.0f)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the physics loss (residual of the Euler-Bernoulli beam equation). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
torch::Tensor {\b Beam::compute_l2_regularization} ({\b PINN} &model, const float lambda_reg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes L2 (Tikhonov) regularization loss on all model parameters. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Losses} {\b Beam::compute_losses} ({\b PINN} &model, const torch::Tensor &physics_input)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Computes the total loss and its components (physics, boundary, L2). }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Beam::visualize_solution} ({\b PINN} &model, int grid_size=20)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Visualizes the solution u(x) in R of the trained {\b PINN} model on [0, 1]. }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Beam::adam_epochs} = uint16_t\{ 500 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Beam::adam_epochs_diff} = uint16_t\{ 100 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Beam.h\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Beam.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include <torch/torch.h>}\par
00004 {\cf21 #include "Global.h"}\par
00005 \par
00006 {\cf17 namespace }Beam \{\par
00007 \par
00016     {\cf17 class }PINN : {\cf17 public} torch::nn::Module \{\par
00017     {\cf17 public}:\par
00018         PINN() \{\par
00019             {\cf20 // Network structure: 1 input \'E2\'86\'92 5 neurons \'E2\'86\'92 5 neurons \'E2\'86\'92 1 output}\par
00020             fc1 = register_module({\cf22 "fc1"}, torch::nn::Linear(1, 5));\par
00021             fc2 = register_module({\cf22 "fc2"}, torch::nn::Linear(5, 5));\par
00022             fc3 = register_module({\cf22 "fc3"}, torch::nn::Linear(5, 1));\par
00023 \par
00024             {\cf20 // Initialize weights using Xavier initialization}\par
00025             torch::nn::init::xavier_uniform_(fc1->weight);\par
00026             torch::nn::init::xavier_uniform_(fc2->weight);\par
00027             torch::nn::init::xavier_uniform_(fc3->weight);\par
00028         \}\par
00029 \par
00035         torch::Tensor forward(torch::Tensor x) \{\par
00036             x = torch::tanh(fc1->forward(x));\par
00037             x = torch::tanh(fc2->forward(x));\par
00038             x = fc3->forward(x);\par
00039             {\cf19 return} x;\par
00040         \}\par
00041 \par
00042     {\cf17 private}:\par
00043         torch::nn::Linear fc1\{ {\cf17 nullptr} \}, fc2\{ {\cf17 nullptr} \}, fc3\{ {\cf17 nullptr} \};\par
00044     \};\par
00045 \par
00049     {\cf17 struct }Losses \{\par
00050         torch::Tensor total;\par
00051         torch::Tensor physics;\par
00052         torch::Tensor boundary;\par
00053         torch::Tensor l2_reg;\par
00054     \};\par
00055 \par
00056     {\cf20 // Number of epochs for training with Adam optimizer}\par
00057     {\cf17 constexpr} {\cf17 auto} adam_epochs = uint16_t\{ 500 \};\par
00058     {\cf17 constexpr} {\cf17 auto} adam_epochs_diff = uint16_t\{ 100 \};\par
00059 \par
00065     torch::Tensor generate_training_data({\cf17 const} {\cf18 int} n_points = 100) \{\par
00066         {\cf17 auto} options = torch::TensorOptions().dtype(torch::kFloat32).requires_grad({\cf17 true});\par
00067         {\cf17 auto} x = torch::rand(\{ n_points, 1 \}, options);  {\cf20 // Random points in [0, 1]}\par
00068         {\cf19 return} x;\par
00069     \}\par
00070 \par
00083     torch::Tensor boundary_loss(PINN& model) \{\par
00084         {\cf17 auto} options = torch::TensorOptions().dtype(torch::kFloat32).requires_grad({\cf17 true});\par
00085 \par
00086         {\cf20 // x = 0 point}\par
00087         {\cf17 auto} x0 = torch::zeros(\{ 1, 1 \}, options).set_requires_grad({\cf17 true});\par
00088         {\cf17 auto} u0 = model.forward(x0);\par
00089         {\cf17 auto} du0 = torch::autograd::grad(\{ u0 \}, \{ x0 \}, \{ torch::ones_like(u0) \},\par
00090             Global::keep_graph, {\cf17 true})[0];\par
00091 \par
00092         {\cf20 // x = 1 point}\par
00093         {\cf17 auto} x1 = torch::ones(\{ 1, 1 \}, options).set_requires_grad({\cf17 true});\par
00094         {\cf17 auto} u1 = model.forward(x1);\par
00095 \par
00096         {\cf17 auto} du1 = torch::autograd::grad(\{ u1 \}, \{ x1 \}, \{ torch::ones_like(u1) \},\par
00097             Global::keep_graph, {\cf17 true})[0];\par
00098         {\cf17 auto} d2u1 = torch::autograd::grad(\{ du1 \}, \{ x1 \}, \{ torch::ones_like(du1) \},\par
00099             Global::keep_graph, {\cf17 true})[0];\par
00100         {\cf17 auto} d3u1 = torch::autograd::grad(\{ d2u1 \}, \{ x1 \}, \{ torch::ones_like(d2u1) \},\par
00101             Global::keep_graph, {\cf17 true})[0];\par
00102 \par
00103         {\cf20 // Sum of MSE losses for each boundary condition}\par
00104         {\cf17 auto} loss = torch::mse_loss(u0, torch::zeros_like(u0)) +\par
00105             torch::mse_loss(du0, torch::zeros_like(du0)) +\par
00106             torch::mse_loss(d2u1, torch::zeros_like(d2u1)) +\par
00107             torch::mse_loss(d3u1, torch::zeros_like(d3u1));\par
00108 \par
00109         {\cf19 return} loss;\par
00110     \}\par
00111 \par
00124     torch::Tensor physics_loss(PINN& model, torch::Tensor input, {\cf18 float} EI = 1.0f) \{\par
00125         {\cf19 try} \{\par
00126             {\cf17 auto} x = input.clone().requires_grad_({\cf17 true});\par
00127             {\cf17 auto} u = model.forward(x);\par
00128             {\cf17 auto} ones = torch::ones_like(u);\par
00129 \par
00130             {\cf17 auto} du_dx = torch::autograd::grad(\{ u \}, \{ x \}, \{ ones \}, Global::keep_graph, {\cf17 true})[0];\par
00131             {\cf17 auto} d2u_dx2 = torch::autograd::grad(\{ du_dx \}, \{ x \}, \{ ones \}, Global::keep_graph, {\cf17 true})[0];\par
00132             {\cf17 auto} d3u_dx3 = torch::autograd::grad(\{ d2u_dx2 \}, \{ x \}, \{ ones \}, Global::keep_graph, {\cf17 true})[0];\par
00133             {\cf17 auto} d4u_dx4 = torch::autograd::grad(\{ d3u_dx3 \}, \{ x \}, \{ ones \}, Global::keep_graph, {\cf17 true})[0];\par
00134 \par
00135             {\cf17 auto} q = torch::ones_like(x);  {\cf20 // Constant load q(x) = 1}\par
00136 \par
00137             {\cf17 auto} residual = EI * d4u_dx4 - q;\par
00138 \par
00139             {\cf19 return} torch::mean(residual.pow(2));\par
00140         \}\par
00141         {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
00142             std::cerr << {\cf22 "Error in physics_loss: "} << e.what() << std::endl;\par
00143             {\cf19 return} torch::tensor(0.0f, torch::requires_grad({\cf17 true}));\par
00144         \}\par
00145     \}\par
00146 \par
00154     torch::Tensor compute_l2_regularization(PINN& model, {\cf17 const} {\cf18 float} lambda_reg) \{\par
00155         {\cf19 if} (lambda_reg <= 0.0f) \{\par
00156             {\cf19 return} torch::zeros(\{ 1 \}, torch::TensorOptions().dtype(torch::kFloat32));\par
00157         \}\par
00158 \par
00159         torch::Tensor l2 = torch::zeros(\{ 1 \}, torch::TensorOptions().dtype(torch::kFloat32));\par
00160         {\cf19 for} ({\cf17 const} {\cf17 auto}& param : model.parameters()) \{\par
00161             l2 += torch::norm(param, 2).pow(2);\par
00162         \}\par
00163 \par
00164         {\cf19 return} lambda_reg * l2;\par
00165     \}\par
00166 \par
00176     Losses compute_losses(PINN& model, {\cf17 const} torch::Tensor& physics_input) \{\par
00177         {\cf19 try} \{\par
00178             {\cf17 auto} loss_physics = physics_loss(model, physics_input);\par
00179             {\cf17 auto} loss_boundary = boundary_loss(model);\par
00180             {\cf17 auto} l2_reg = compute_l2_regularization(model, 0.0f);\par
00181 \par
00182             {\cf17 auto} total = loss_physics + 2.0f * loss_boundary + l2_reg;\par
00183 \par
00184             {\cf19 return} \{ total, loss_physics, loss_boundary, l2_reg \};\par
00185         \}\par
00186         {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
00187             std::cerr << {\cf22 "Error in compute_losses: "} << e.what() << std::endl;\par
00188             {\cf17 auto} dummy = torch::tensor(1.0f, torch::requires_grad({\cf17 true}));\par
00189             {\cf19 return} \{ dummy, dummy, dummy, dummy \};\par
00190         \}\par
00191     \}\par
00192 \par
00201     {\cf18 void} visualize_solution(PINN& model, {\cf18 int} grid_size = 20) \{\par
00202         model.eval();                          {\cf20 // Set model to inference mode}\par
00203         torch::NoGradGuard no_grad;           {\cf20 // Disable gradient calculation}\par
00204 \par
00205         {\cf20 // Detect device used by model parameters (CPU or CUDA)}\par
00206         torch::Device device = torch::kCPU;\par
00207         {\cf19 for} ({\cf17 const} {\cf17 auto}& p : model.parameters()) \{\par
00208             device = p.device(); {\cf19 break};\par
00209         \}\par
00210 \par
00211         {\cf17 auto} options = torch::TensorOptions().dtype(torch::kFloat32).device(device);\par
00212 \par
00213         std::cout << {\cf22 "\\nSolution of the Euler-Bernoulli beam equation on [0, 1]:\\n"};\par
00214 \par
00215         {\cf19 for} ({\cf18 int} i = 0; i < grid_size; ++i) \{\par
00216             {\cf18 float} x_val = {\cf17 static_cast<}{\cf18 float}{\cf17 >}(i) / (grid_size - 1);  {\cf20 // Linearly spaced point in [0, 1]}\par
00217             {\cf17 auto} x_tensor = torch::tensor(\{ \{x_val\} \}, options);    {\cf20 // Shape [1, 1]}\par
00218 \par
00219             torch::Tensor u_pred;\par
00220             {\cf19 try} \{\par
00221                 u_pred = model.forward(x_tensor);  {\cf20 // Predict u(x)}\par
00222             \}\par
00223             {\cf19 catch} ({\cf17 const} c10::Error& e) \{\par
00224                 std::cerr << {\cf22 "Error during forward pass at x = "} << x_val << {\cf22 ": "} << e.what() << {\cf22 "\\n"};\par
00225                 {\cf19 continue};\par
00226             \}\par
00227 \par
00228             {\cf20 // Convert tensor to float and print result}\par
00229             {\cf18 float} u_val = u_pred.detach().to(torch::kCPU).item<{\cf18 float}>();\par
00230             std::cout << std::fixed << std::setprecision(2) << x_val << {\cf22 "\\t"} << std::setprecision(5) << u_val << {\cf22 "\\n"};\par
00231         \}\par
00232     \}\par
00233 \}\par
00234 \par
00235 {\cf20 /*}\par
00236 {\cf20 Vorschl\'E4ge und Anmerkungen (keine Code-\'C4nderung!):}\par
00237 {\cf20 Hardcoded loss weights (+2.0f * boundary etc.) k\'F6nnten als Konstante oder Parameter gef\'FChrt werden.}\par
00238 {\cf20 }\par
00239 {\cf20 Die Verwendung von Global::keep_graph ist etwas "magisch" \'96 eventuell explizit dokumentieren oder kapseln.}\par
00240 {\cf20 }\par
00241 {\cf20 In physics_loss: Bei Problemen mit Gradientenstabilit\'E4t w\'E4re ein optionaler Check der .grad_fn() hilfreich.}\par
00242 {\cf20 }\par
00243 {\cf20 std::pair<torch::Tensor, torch::Tensor> in generate_training_data() enth\'E4lt ein Dummy-Ziel. Vielleicht besser std::tuple<torch::Tensor> oder ein spezieller Struct.}\par
00244 {\cf20 }\par
00245 {\cf20 Fehlerbehandlung (try-catch) ist gut \'97 aber torch::tensor(0.0f, ...) ohne Device-Spezifikation kann zu Problemen f\'FChren (nur wenn du CUDA verwendest).}\par
00246 {\cf20 }\par
00247 {\cf20 }\par
00248 {\cf20 }\par
00249 {\cf20 */}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Global.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Global.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Global.h}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <torch/torch.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Global}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr auto {\b Global::keep_graph} = bool\{ true \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Global.h\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Global.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Global.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #include <torch/torch.h>}\par
00004 \par
00005 {\cf17 namespace }Global \{\par
00006     {\cf17 constexpr} {\cf17 auto} keep_graph = {\cf18 bool}\{ {\cf17 true} \};\par
00007 \}\par
00008 \par
00009 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Timer.h File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Timer.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Timer.h}
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <chrono>}\par
{\f2 #include <iostream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Helper::Timer}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Helper}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Timer.h\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Timer.h}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/include/Timer.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #pragma once}\par
00002 \par
00003 {\cf21 #pragma once}\par
00004 \par
00005 {\cf21 #include <chrono>}\par
00006 {\cf21 #include <iostream>}\par
00007 \par
00008 {\cf17 namespace }Helper \{\par
00009     {\cf17 class }Timer\par
00010     \{\par
00011     {\cf17 public}:\par
00012         Timer() : outputAtExit(true)\par
00013         \{\par
00014             start = std::chrono::steady_clock::now();\par
00015         \}\par
00016 \par
00017         {\cf18 void} setOutputAtExit({\cf18 bool} _outputAtExit) \{\par
00018             outputAtExit = _outputAtExit;\par
00019         \}\par
00020 \par
00021         std::chrono::steady_clock::time_point getStart(){\cf17  const }\{\par
00022             {\cf19 return} start;\par
00023         \}\par
00024 \par
00025         std::chrono::milliseconds getDuration(){\cf17  const }\{\par
00026             {\cf19 return} std::chrono::duration_cast<std::chrono::milliseconds>(\par
00027                 std::chrono::steady_clock::now() - start);\par
00028         \}\par
00029 \par
00030         ~Timer()\par
00031         \{\par
00032             {\cf19 if} (outputAtExit)\par
00033             \{\par
00034                 std::cout << {\cf22 "Destructor called: Time difference needed for program execution: "} << getDuration().count() << {\cf22 " Milliseconds.\\n"};\par
00035             \}\par
00036         \}\par
00037 \par
00038     {\cf17 private}:\par
00039         {\cf18 bool} outputAtExit\{\};\par
00040         std::chrono::steady_clock::time_point start\{\};\par
00041     \};\par
00042 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/main.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/main.cpp}
{\xe \v C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/main.cpp}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <torch/torch.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <vector>}\par
{\f2 #include <random>}\par
{\f2 #include <chrono>}\par
{\f2 #include <iomanip>}\par
{\f2 #include <array>}\par
{\f2 #include "Global.h"}\par
{\f2 #include "Timer.h"}\par
{\f2 #include "Beam.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main routine: trains a Physics-Informed Neural Network (PINN) for the Euler-Bernoulli beam equation. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main routine: trains a Physics-Informed Neural Network (PINN) for the Euler-Bernoulli beam equation. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Training phases:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Phase 1: Adam optimizer for coarse fitting\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Phase 2: LBFGS optimizer for fine-tuning\par}
Handles device selection, adaptive learning rate, gradient clipping, and logging.\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int Exit code (0 = success) \par
}}}{
Definition at line {\b 25} of file {\b main.cpp}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
C:/Users/haasr/source/repos/BeamEquation/Beam.Cpp/main.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Go to the documentation of this file.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include <torch/torch.h>}\par
00002 {\cf21 #include <iostream>}\par
00003 {\cf21 #include <vector>}\par
00004 {\cf21 #include <random>}\par
00005 {\cf21 #include <chrono>}\par
00006 {\cf21 #include <iomanip>}\par
00007 {\cf21 #include <array>}\par
00008 {\cf21 #include "Global.h"}\par
00009 {\cf21 #include "Timer.h"}\par
00010 {\cf21 #include "Beam.h"}\par
00011 \par
00012 {\cf17 using namespace }Beam;\par
00013 \par
00025 {\cf18 int} main() \{\par
00026     Helper::Timer tim;\par
00027     std::cout << {\cf22 "Physics-Informed Neural Network for Beam Equation\\n"};\par
00028     std::cout << {\cf22 "====================================================\\n\\n"};\par
00029 \par
00030     {\cf20 // --- Device selection (CPU vs. CUDA) ---}\par
00031     torch::Device device(torch::kCPU);\par
00032     {\cf19 if} (torch::cuda::is_available()) \{\par
00033         device = torch::Device(torch::kCUDA);\par
00034         std::cout << {\cf22 "CUDA available - using GPU\\n"};\par
00035     \}\par
00036     {\cf19 else} \{\par
00037         std::cout << {\cf22 "CUDA NOT available - using CPU\\n"};\par
00038     \}\par
00039 \par
00040     {\cf20 // Create model instance and move to selected device}\par
00041     {\cf17 auto} model = std::make_unique<PINN>();\par
00042     model->to(device);\par
00043 \par
00044     {\cf20 // Generate physics training data and move to device}\par
00045     {\cf17 auto} physics_input = generate_training_data(100);\par
00046     physics_input = physics_input.to(device);\par
00047 \par
00048     {\cf20 // initial learning rate}\par
00049     {\cf18 float} current_lr = 0.1f;\par
00050     {\cf17 auto} start_time = std::chrono::steady_clock::now();\par
00051 \par
00052     {\cf20 // === PHASE 1: Adam optimizer (coarse training) ===}\par
00053     torch::optim::Adam optimizer(model->parameters(), torch::optim::AdamOptions(current_lr));\par
00054 \par
00055     std::array<Losses, adam_epochs / adam_epochs_diff> all_losses;\par
00056 \par
00057     std::cout << {\cf22 "\\n[Phase 1] Adam Training...\\n"};\par
00058 \par
00059     {\cf19 for} ({\cf18 int} epoch = 0; epoch < adam_epochs; ++epoch) \{\par
00060         {\cf19 try} \{\par
00061             optimizer.zero_grad();\par
00062 \par
00063             {\cf17 auto} losses = compute_losses(*model, physics_input);\par
00064 \par
00065             {\cf20 // Check for NaN or Inf values in loss}\par
00066             {\cf19 if} (torch::isnan(losses.total).any().item<{\cf18 bool}>() || torch::isinf(losses.total).any().item<{\cf18 bool}>()) \{\par
00067                 std::cerr << {\cf22 "Adam Warning: Loss is NaN or Inf in epoch "} << epoch << std::endl;\par
00068 \par
00069                 {\cf20 // Halve learning rate and update optimizer}\par
00070                 current_lr *= 0.5f;\par
00071                 std::cerr << {\cf22 "Adjusting learning rate to "} << current_lr << std::endl;\par
00072                 {\cf19 for} ({\cf17 auto}& param_group : optimizer.param_groups()) \{\par
00073                     {\cf17 auto}& options = {\cf17 static_cast<}torch::optim::AdamOptions&{\cf17 >}(param_group.options());\par
00074                     options.lr(current_lr);\par
00075                 \}\par
00076                 {\cf19 continue};\par
00077             \}\par
00078 \par
00079             losses.total.backward(\{\}, Global::keep_graph);\par
00080             torch::nn::utils::clip_grad_norm_(model->parameters(), 1.0);  {\cf20 // Gradient clipping}\par
00081             optimizer.step();\par
00082 \par
00083             {\cf20 // Periodic logging}\par
00084             {\cf19 if} (epoch % 200 == 0) \{\par
00085                 all_losses[epoch / adam_epochs_diff] = losses;\par
00086                 std::cout << {\cf22 "Epoch "} << epoch << {\cf22 "/"} << adam_epochs\par
00087                     << {\cf22 " - Total: "} << losses.total.item<{\cf18 float}>()\par
00088                     << {\cf22 " | Physics: "} << losses.physics.item<{\cf18 float}>()\par
00089                     << {\cf22 " | Boundary: "} << losses.boundary.item<{\cf18 float}>()\par
00090                     << {\cf22 " | L2 term: "} << losses.l2_reg.item<{\cf18 float}>()\par
00091                     << {\cf22 " - LR: "} << current_lr << std::endl;\par
00092             \}\par
00093         \}\par
00094         {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
00095             std::cout << {\cf22 "Error during Adam epoch "} << epoch << {\cf22 ": "} << e.what() << std::endl;\par
00096         \}\par
00097     \}\par
00098 \par
00099     {\cf20 // === PHASE 2: LBFGS optimizer (fine-tuning) ===}\par
00100     std::cout << {\cf22 "\\n[Phase 2] LBFGS Finetuning...\\n"};\par
00101 \par
00102     torch::optim::LBFGS lbfgs(model->parameters(),\par
00103         torch::optim::LBFGSOptions(1.0)\par
00104         .max_iter(20)\par
00105         .tolerance_grad(1e-7)\par
00106         .tolerance_change(1e-9)\par
00107         .history_size(100));\par
00108 \par
00109     {\cf18 int} lbfgs_epochs = 50;\par
00110     current_lr *= 0.5f;\par
00111 \par
00112     {\cf19 for} ({\cf18 int} epoch = 0; epoch < lbfgs_epochs; ++epoch) \{\par
00113         {\cf19 try} \{\par
00114             {\cf17 auto} closure = [&]() -> torch::Tensor \{\par
00115                 lbfgs.zero_grad();\par
00116 \par
00117                 {\cf17 auto} loss = compute_losses(*model, physics_input).total;\par
00118 \par
00119                 {\cf20 // NaN/Inf check}\par
00120                 {\cf19 if} (torch::isnan(loss).any().item<bool>() || torch::isinf(loss).any().item<bool>()) \{\par
00121                     std::cerr << {\cf22 "LBFGS Warning: Loss is NaN or Inf in epoch "} << epoch << std::endl;\par
00122 \par
00123                     current_lr *= 0.5f;\par
00124                     std::cerr << {\cf22 "Adjusting learning rate to "} << current_lr << std::endl;\par
00125                     {\cf19 for} ({\cf17 auto}& param_group : lbfgs.param_groups()) \{\par
00126                         {\cf17 auto}& options = {\cf17 static_cast<}torch::optim::LBFGSOptions&{\cf17 >}(param_group.options());\par
00127                         options.lr(current_lr);\par
00128                     \}\par
00129                     {\cf19 return} torch::tensor(1.0f, torch::requires_grad({\cf17 true}));  {\cf20 // Dummy loss}\par
00130                 \}\par
00131 \par
00132                 loss.backward(\{\}, Global::keep_graph);\par
00133                 {\cf19 return} loss;\par
00134                 \};\par
00135 \par
00136             torch::nn::utils::clip_grad_norm_(model->parameters(), 1.0);  {\cf20 // Gradient clipping}\par
00137             torch::Tensor loss = lbfgs.step(closure);\par
00138 \par
00139             {\cf19 if} (epoch % 10 == 0) \{\par
00140                 std::cout << {\cf22 "LBFGS Epoch "} << epoch << {\cf22 "/"} << lbfgs_epochs\par
00141                     << {\cf22 " - Loss: "} << loss.item<{\cf18 float}>() << {\cf22 " - Learning Rate: "} << current_lr << std::endl;\par
00142             \}\par
00143         \}\par
00144         {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
00145             std::cout << {\cf22 "Error during LBFGS epoch "} << epoch << {\cf22 ": "} << e.what() << std::endl;\par
00146         \}\par
00147     \}\par
00148 \par
00149     {\cf20 // === Final output ===}\par
00150     {\cf17 auto} end_time = std::chrono::steady_clock::now();\par
00151     {\cf17 auto} duration = std::chrono::duration_cast<std::chrono::seconds>(end_time - start_time);\par
00152 \par
00153     std::cout << {\cf22 "\\nTraining completed in "} << duration.count() << {\cf22 " seconds\\n"};\par
00154 \par
00155     model->eval();  {\cf20 // Final evaluation mode}\par
00156     visualize_solution(*model);\par
00157 \par
00158     {\cf19 return} 0;\par
00159 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
